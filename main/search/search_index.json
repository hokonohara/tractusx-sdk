{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#eclipse-tractus-x-sdk-documentation","title":"Eclipse Tractus-X SDK Documentation","text":"<p>Welcome to the Eclipse Tractus-X Software Development Kit (SDK) - your gateway to building powerful dataspace applications and services.</p> <p> </p>"},{"location":"#overview-of-the-sdk","title":"Overview of the SDK","text":"<p>The Tractus-X SDK is a modular Python library that provides simplified APIs and methods for interacting with dataspace infrastructure. It serves as a comprehensive toolkit for both providing and consuming data in the Tractus-X ecosystem.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd0c Connector Integration - Seamless interaction with Eclipse Dataspace Connectors (EDC)</li> <li>\ud83c\udfed Industry Standards - Built-in support for industry-specific data models and standards</li> <li>\ud83d\udd0d Data Discovery - Easy exploration and discovery of available datasets</li> <li>\ud83d\udee1\ufe0f Secure Access - Automated authentication and policy management</li> <li>\ud83d\udce6 Modular Design - Use only the components you need</li> <li>\ud83d\ude80 Quick Start - Get up and running in minutes with our tutorials</li> </ul>"},{"location":"#purpose-and-goals","title":"Purpose and Goals","text":"<p>The Tractus-X SDK aims to:</p> <ul> <li>Simplify Integration - Provide easy-to-use abstractions over complex dataspace protocols</li> <li>Accelerate Development - Offer pre-built components for common dataspace operations  </li> <li>Ensure Compatibility - Maintain compatibility with evolving dataspace standards</li> <li>Enable Innovation - Provide a solid foundation for building custom dataspace applications</li> <li>Foster Adoption - Lower the barrier to entry for dataspace participation</li> </ul>"},{"location":"#based-on-eclipse-tractus-x-kits","title":"Based on Eclipse Tractus-X KITs","text":"<p>This SDK implements and extends functionality from official Eclipse Tractus-X KITs:</p> <ul> <li>Connector KIT - EDC connector patterns</li> <li>Digital Twin KIT - Digital Twin Registry integration</li> <li>Industry Core KIT - Core industry data models</li> </ul>"},{"location":"#target-audience","title":"Target Audience","text":"<p>This SDK is designed for:</p>"},{"location":"#developers","title":"\ud83e\uddd1\u200d\ud83d\udcbb Developers","text":"<ul> <li>Building dataspace-enabled applications</li> <li>Integrating existing systems with Tractus-X</li> <li>Creating microservices for data exchange</li> </ul>"},{"location":"#organizations","title":"\ud83c\udfe2 Organizations","text":"<ul> <li>Companies joining the Tractus-X dataspace</li> <li>System integrators implementing dataspace solutions</li> <li>Technology vendors building on Tractus-X standards</li> </ul>"},{"location":"#researchers-students","title":"\ud83c\udf93 Researchers &amp; Students","text":"<ul> <li>Learning about dataspace technologies</li> <li>Experimenting with secure data exchange</li> <li>Building proof-of-concept applications</li> </ul>"},{"location":"#data-engineers","title":"\ud83d\udcca Data Engineers","text":"<ul> <li>Managing data assets and catalogs</li> <li>Implementing data governance policies</li> <li>Building data pipelines with dataspace sources</li> </ul>"},{"location":"#quick-links-and-resources","title":"Quick Links and Resources","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Installation Guide - Set up your development environment</li> <li>First step: Creation of an asset - Build your first dataspace application</li> </ul>"},{"location":"#user-guides","title":"\ud83d\udcda User Guides","text":"<ul> <li>Dataspace Library - Core connector services and Eclipse Tractus-X Connector integration</li> <li>Industry Library - Digital Twin Registry and Submodel Server integration</li> <li>Extension Library - Use case-specific extensions and add-on functionality</li> </ul>"},{"location":"#development","title":"\ud83d\udee0\ufe0f Development","text":"<ul> <li>GitHub Repository - Source code and issues</li> <li>PyPI Package - Latest releases</li> <li>Changelog - Version history</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>Discussions - Ask questions and share ideas</li> <li>Contributing Guidelines - How to contribute</li> <li>Community Meetings - Weekly developer meetings</li> </ul>"},{"location":"#additional-resources","title":"\ud83d\udcd6 Additional Resources","text":"<ul> <li>Eclipse Tractus-X - Official project website</li> <li>Tractus-X KITs - Standard specifications</li> </ul> <p>New to Dataspace Technology?</p> <p>Start with our First step to learn the basics of dataspace interaction in just 10 minutes!</p> <p>Version Information</p> <p>Current Version: 0.5.0 Python Support: 3.12+ License: Apache 2.0 (Code) / CC-BY-4.0 (Documentation)</p>"},{"location":"#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"VERSIONING/","title":"Documentation Versioning","text":"<p>This project uses automated documentation versioning with MkDocs Material and Mike.</p>"},{"location":"VERSIONING/#how-it-works","title":"How It Works","text":"<p>The documentation versioning is fully automated through GitHub Actions:</p>"},{"location":"VERSIONING/#automatic-deployments","title":"Automatic Deployments","text":"<ul> <li>Tagged Releases: When you create a tag like <code>v0.5.0</code>, the workflow automatically:</li> <li>Deploys documentation for that version</li> <li>Updates the <code>latest</code> alias to point to the new version</li> <li> <p>Sets it as the default version</p> </li> <li> <p>Main Branch: Every push to <code>main</code> automatically deploys the development docs to a <code>main</code> version</p> </li> <li> <p>Pull Requests: PRs are validated by building the docs (but not deploying)</p> </li> </ul>"},{"location":"VERSIONING/#version-selector","title":"Version Selector","text":"<p>Users will see a version selector in the documentation header allowing them to switch between: - Latest stable release (e.g., <code>0.5.0</code>) - Development version (<code>main</code>) - Previous versions (e.g., <code>0.4.0</code>)</p>"},{"location":"VERSIONING/#usage","title":"Usage","text":"<ol> <li> <p>For new releases: Just create and push a git tag starting with <code>v</code>:    Bash<pre><code>git tag v0.6.0\ngit push origin v0.6.0\n</code></pre></p> </li> <li> <p>For development: Simply push to main - docs are automatically updated</p> </li> </ol> <p>No manual intervention needed! \ud83d\ude80</p>"},{"location":"VERSIONING/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/","title":"1.- Record Architecture Decisions","text":""},{"location":"architecture/decision-records/0001-record-architecture-decisions/#1-record-architecture-decisions","title":"1. Record architecture decisions","text":"<p>Date: 2025-02-20</p>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools.</p>"},{"location":"architecture/decision-records/0001-record-architecture-decisions/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"architecture/decision-records/0002-data-storage-architecture/","title":"2.- Data Storage Architecture","text":""},{"location":"architecture/decision-records/0002-data-storage-architecture/#2-data-storage-architecture","title":"2. Data Storage Architecture","text":"<p>Date: 2025-02-20</p>"},{"location":"architecture/decision-records/0002-data-storage-architecture/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decision-records/0002-data-storage-architecture/#context","title":"Context","text":"<p>From the experience from a data provider with many different products to offer, a SQL database is really critical for supporting the different complex queries that need to be performed. However this Tractus-X SDK implementation does not requires persistence at all, since the persistance is located in the service that contain the original data (Digital Twin Registry, EDC, etc.)</p> <p>The Tractus-X SDK will have a memory/cache mechanism so it can store just the operations that were performed in a short time, and this data format:</p> Python<pre><code>class ConnectorService:\n\n    memory_cache: dict\n\n    def __init__(self, disabled=true):\n        self.memory_cache = {}\n\n    # EXAMPLE\n    def add_connection(self, edc_url, bpn, dct_type, policies):\n        self.memory_cache[bpn] = {}\n        self.memory_cache[bpn][edc_url] = dct_type\n        ...\n</code></pre> <p>The persistence layer will be done in the Use Case applications or in the Industry Core Hub Backend using whatever they want.</p> <p>They can decide which technology (SQL or NO-SQL).</p>"},{"location":"architecture/decision-records/0002-data-storage-architecture/#decision","title":"Decision","text":"<p>The Tractus-X SDK will provide an in memory cache for the Microservice Server (FAST-API) but it can be disabled per parameters. The Storage Architecture will not be specified in the SDK, need to be specified in the application that uses it.</p>"},{"location":"architecture/decision-records/0002-data-storage-architecture/#consequences","title":"Consequences","text":"<ul> <li>Applications need to implement their own persistence layer</li> <li>If the application services (EDC, DTR, and data storage) are down then we can't know what was registered and when.</li> </ul>"},{"location":"architecture/decision-records/0002-data-storage-architecture/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/","title":"3.- SDK Module Architecture","text":""},{"location":"architecture/decision-records/0003-sdk-module-architecture/#3-sdk-module-architecture","title":"3. SDK Module Architecture","text":"<p>Date: 2025-03-31</p>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/#context","title":"Context","text":"<p>https://github.com/eclipse-tractusx/tractusx-sdk/discussions/49</p> <p>In the existing Tractus-X SDK Dataspace layer, we currently find the current modules:</p> <ul> <li><code>config</code>: Configuration files and settings used throughout the SDK.</li> <li><code>managers</code>: Classes that handle the management of different components within the SDK and the data handling.</li> <li><code>models</code>: Data models and schemas that define the structure of the data used by the SDK.</li> <li><code>services</code>: Service classes and functions that provide the core functionality of the SDK and contact to external   services.</li> <li><code>tools</code>: Utility scripts and helper functions that support the development and maintenance of the SDK.   Comparable to utilities.</li> </ul> <p>As the Tractus-X SDK will be used for interactions between quite a few different APIs, the following modules will be included, in addition to the already existing ones:</p> <ul> <li>An <code>adapters</code> module, to handle HTTP requests to those APIs that will be supported.</li> <li>A <code>controllers</code> module, which implements logic specific to the API contexts of the supported APIs.</li> </ul> <p>Being able to handle multiple different versions for the same application is also a requirement of the SDK, which means we must also create a submodule for each of the supported application versions, in each SDK module that was listed above. In example, the following must be possible:</p> Python<pre><code>from tractusx_sdk.dataspace.adapters.connector.v0_9_0 import DmaAdapter as DmaAdapterV0_9_0\nfrom tractusx_sdk.dataspace.adapters.connector.v0_10_0 import DmaAdapter as DmaAdapterV0_10_0\n</code></pre> <p>As such, it was also decided to implement a factory pattern for each module, which will allow for easier management of the different versions and classes.</p>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/#decision","title":"Decision","text":"<p>Based on the context provided above, the Tractus-X SDK will implement the following directory structure:</p> Text Only<pre><code>.\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 dataspace/\n\u2502   \u2502   \u251c\u2500\u2500 adapters/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 base_adapter.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ... other common adapters\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 connector/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 adapter_factory.py                        # Adapter Factory\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 base_dma_adapter.py                       # Abstract Base Class\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 base_dataplane_adapter.py                 # Abstract Base Class\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 ... other connector base adapters\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 v0.9.0/\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 ... 0.9.0 version specific adapters   # Concrete implementation\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 vX.Y.Z/\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 ... X.Y.Z version specific adapters   # Concrete implementation\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 ... other connector versions' adapters/\n\u2502   \u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ... same approach\n\u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ... same approach\n\u2502   \u2502   \u251c\u2500\u2500 managers/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ... same approach\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 tools/\n\u2502   \u2502       \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 industry/\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 extensions/\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 dataspace/\n    \u2502   \u2514\u2500\u2500 ... same approach as above\n    \u251c\u2500\u2500 industry/\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 extensions/\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/#consequences","title":"Consequences","text":"<ul> <li>The factory pattern will be used to create the entities, which will allow for easy extension and modification of the   SDK in the future.<ul> <li>Conversely, the factory pattern will need to be able to dynamically load the correct modules, based on the   required version.</li> </ul> </li> </ul>"},{"location":"architecture/decision-records/0003-sdk-module-architecture/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/","title":"4.- Tractus-X SDK Service","text":""},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#4-tractus-x-sdk-services","title":"4. Tractus-X SDK Services","text":"<p>Date: 2025-05-12</p>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#discussion","title":"Discussion","text":"<p>https://github.com/eclipse-tractusx/tractusx-sdk/discussions/61</p>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#context","title":"Context","text":"<p>It was agreed that the best for the tractus-x sdk microservices that use the SDK at a specific version are to be compiled and maintained in a separated repository. The tractus-x sdk will provide a plain code library that can be used by mutliple products.</p> <p>Therefore it will not be deployable and also will not contain any type of \"microservice\" or \"api\" specification.</p>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#decision","title":"Decision","text":"<p>Create a new respository called https://github.com/eclipse-tractusx/tractusx-sdk-services</p> <p>It will store the microservices that use the SDK for a specific use case.</p> <p>In this way whatever is uploaded there can still be merged to the \"main\" framework.</p>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#consequences","title":"Consequences","text":"<ul> <li>It will impact in the way we maintain the repositories, having a tractusx-sdk-services repository will require more maintaince.</li> <li>It may occur that duplication of code is happening in some cases of migration to the sdk.</li> <li>Generic functionalities shall be migrated to the SDK and not be maintained in the services layer.</li> <li>In this way other services and products can benefit from it.</li> </ul>"},{"location":"architecture/decision-records/0004-tractusx-sdk-services/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"getting-started/getting-started/","title":"Getting Started","text":""},{"location":"getting-started/getting-started/#tractus-sdk-documentation","title":"Tractus-SDK Documentation","text":""},{"location":"getting-started/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before getting started with the Tractus-X SDK, ensure you have:</p> <ul> <li>Python 3.12+ installed on your system</li> <li>Internet connection for downloading packages</li> <li>Basic Python knowledge (variables, functions, imports)</li> <li>Text editor or IDE for writing code</li> </ul>"},{"location":"getting-started/getting-started/#installation-guide","title":"Installation Guide","text":""},{"location":"getting-started/getting-started/#development-environment-setup","title":"Development Environment Setup","text":"<p>We recommend using a virtual environment to avoid conflicts with other Python projects:</p> Create Virtual Environment<pre><code># Create a new virtual environment\npython -m venv tractux-sdk-env\n\n# Activate the environment\n# On Windows:\ntractux-sdk-env\\Scripts\\activate\n# On macOS/Linux:\nsource tractux-sdk-env/bin/activate\n</code></pre> <p>The Tractus-X SDK can be installed in two ways: from PyPI (recommended for most users) or from source (for developers).</p> Install from PyPI (Recommended)Install from Source <p>This is the easiest way to get started:</p> Bash<pre><code># Install the SDK directly from PyPI (recommended for users)\npip install tractusx-sdk\n\n# Verify the installation works\npython -c \"\ntry:\n    from tractusx_sdk.dataspace.services import BaseConnectorService\n    print('\u2705 SDK Ready!')\n    print('BaseConnectorService imported successfully')\nexcept Exception as e:\n    print('\u274c Import failed:')\n    print(f'Error: {e}')\n    import traceback\n    traceback.print_exc()\n\"\n</code></pre> <p>If you need the latest development version or want to contribute:</p> Bash<pre><code># Only use this if you need the latest development version\ngit clone https://github.com/eclipse-tractusx/tractusx-sdk.git\ncd tractusx-sdk\npip install -e .\n\n# Verify installation\npython -c \"\ntry:\n    from tractusx_sdk.dataspace.services import BaseConnectorService\n    print('\u2705 SDK Ready!')\n    print('BaseConnectorService imported successfully')\nexcept Exception as e:\n    print('\u274c Import failed:')\n    print(f'Error: {e}')\n    import traceback\n    traceback.print_exc()\n\"\n</code></pre> <p>Installation Complete!</p> <p>If you see \"\u2705 SDK Ready!\" then you're all set to continue to the next step!</p> <p>Compatibility Notice</p> <p>Currently this SDK is not 100% compatible and has not been tested against the <code>v0.11.x</code> connector. The issue is being worked on here.</p>"},{"location":"getting-started/getting-started/#first-step-creation-of-an-asset","title":"First Step: Creation of an Asset","text":"<p>Now let's create your first data asset in the dataspace. This example shows you the basic workflow of connecting to a dataspace, requesting the current assets, and creating an asset.</p> <p>Prerequisites</p> <p>You will need a connector deployed to be able to follow this tutorial.</p>"},{"location":"getting-started/getting-started/#basic-configuration","title":"Basic Configuration","text":"<p>Let's configure your connection to a dataspace connector and request all available assets:</p> <p>Create a file called <code>connect.py</code> with your configuration and connection logic:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import BaseConnectorProviderService\nfrom tractusx_sdk.dataspace.services.connector.service_factory import ServiceFactory\nimport logging\n\n# Step 1: Configure your connector settings\n# Replace these with your actual connector details\nconsumer_connector_controlplane_hostname = \"https://connector.example.com\"\nconsumer_connector_controlplane_management_api = \"/management\"\nconsumer_api_key_header = \"X-Api-Key\"\nconsumer_api_key = \"your-api-key\"\nconsumer_dataspace_version = \"jupiter\"  # or \"saturn\" for latest\n\n# Step 2: Set up headers for API authentication\nconsumer_connector_headers = {\n    consumer_api_key_header: consumer_api_key,\n    \"Content-Type\": \"application/json\"\n}\n\n# Step 3: Initialize logger\nlogger = logging.getLogger(__name__)\n\n\n\n# Step 4: Create connector service using ServiceFactory\nprovider_connector_service: BaseConnectorProviderService = ServiceFactory.get_connector_provider_service(\n    dataspace_version=consumer_dataspace_version,\n    base_url=consumer_connector_controlplane_hostname,\n    dma_path=consumer_connector_controlplane_management_api,\n    headers=consumer_connector_headers,\n    logger=logger,\n    verbose=True\n)\n\n# Step 5: Test the connection\ntry:\n    print(\"\ud83d\udd17 Connecting to dataspace...\")\n\n    assets = provider_connector_service.assets.get_all()\n\n    # Check if assets is a Response object and extract the data\n    if hasattr(assets, 'json'):\n        # If it's a Response object, get the JSON data\n        assets_data = assets.json()\n        print(\"\ud83d\udce6 Assets data:\")\n        print(assets_data)\n    elif hasattr(assets, 'status_code'):\n        # If it's a Response object but JSON parsing fails\n        print(f\"\u2705 Response status: {assets.status_code}\")\n        print(f\"\ud83d\udcc4 Raw response text: {assets.text}\")\n    else:\n        # If it's already parsed data\n        print(\"\ud83d\udce6 Assets:\")\n        print(assets)\n\nexcept Exception as e:\n    print(f\"\u274c Connection failed: {e}\")\n    print(\"\ud83d\udca1 Check your configuration values and network connection\")\n</code></pre> <p>Run this script to test your connection:</p> Bash<pre><code>python connect.py\n</code></pre> <p>Configuration Values</p> <p>Replace the configuration values in the script with your actual connector details:</p> <ul> <li><code>consumer_connector_controlplane_hostname</code>: Your connector URL</li> <li><code>consumer_api_key</code>: Your API key for authentication  </li> <li><code>consumer_connector_controlplane_management_api</code>: Management API path (usually <code>/management</code>)</li> <li><code>consumer_dataspace_version</code>: Version of your dataspace connector</li> </ul> <p>Contact your dataspace administrator for these values.</p> <p>Connection Tips</p> <p>\ud83d\udd27 Start simple: Test connection before building complex features \ud83d\udce6 Check assets: See what data is available in your dataspace \ud83d\udcde Get help: Contact your dataspace administrator if connection fails</p>"},{"location":"getting-started/getting-started/#create-an-asset","title":"Create an Asset","text":"<p>Now let's create a new data asset in the dataspace:</p> <p>Modify the file called <code>connect.py</code>:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import BaseConnectorProviderService\nfrom tractusx_sdk.dataspace.services.connector.service_factory import ServiceFactory\nimport logging\n\n# Step 1: Configure your connector settings\n# Replace these with your actual connector details\nconsumer_connector_controlplane_hostname = \"https://connector.example.com\"\nconsumer_connector_controlplane_management_api = \"/management\"\nconsumer_api_key_header = \"X-Api-Key\"\nconsumer_api_key = \"your-api-key\"\nconsumer_dataspace_version = \"jupiter\"  # or \"saturn\" for latest\n\n# Step 2: Set up headers for API authentication\nconsumer_connector_headers = {\n    consumer_api_key_header: consumer_api_key,\n    \"Content-Type\": \"application/json\"\n}\n\n# Step 3: Initialize logger\nlogger = logging.getLogger(__name__)\n\n\n\n# Step 4: Create connector service using ServiceFactory\nprovider_connector_service: BaseConnectorProviderService = ServiceFactory.get_connector_provider_service(\n    dataspace_version=consumer_dataspace_version,\n    base_url=consumer_connector_controlplane_hostname,\n    dma_path=consumer_connector_controlplane_management_api,\n    headers=consumer_connector_headers,\n    logger=logger,\n    verbose=True\n)\n\n# Step 5: Test the connection\ntry:\n    print(\"\ud83d\udd17 Connecting to dataspace...\")\n\n    # assets = provider_connector_service.assets.get_all()\n\n    # # Check if assets is a Response object and extract the data\n    # if hasattr(assets, 'json'):\n    #     # If it's a Response object, get the JSON data\n    #     assets_data = assets.json()\n    #     print(\"\ud83d\udce6 Assets data:\")\n    #     print(assets_data)\n    # elif hasattr(assets, 'status_code'):\n    #     # If it's a Response object but JSON parsing fails\n    #     print(f\"\u2705 Response status: {assets.status_code}\")\n    #     print(f\"\ud83d\udcc4 Raw response text: {assets.text}\")\n    # else:\n    #     # If it's already parsed data\n    #     print(\"\ud83d\udce6 Assets:\")\n    #     print(assets)\n\n    response = provider_connector_service.create_asset(\n        asset_id=\"test-asset-001\",\n        base_url=\"https://example.com/data\",\n        dct_type=\"example-type\",\n        version=\"3.0\"\n    )\n\n    print(\"\u2705 Connection successful!\")\n    print(\"\ud83d\udce6 Created Asset:\")\n    print(response)\n\nexcept Exception as e:\n    print(f\"\u274c Connection failed: {e}\")\n    print(\"\ud83d\udca1 Check your configuration values and network connection\")\n</code></pre> <p>Run the script:</p> Bash<pre><code>python connect.py\n</code></pre> <p>What You'll See</p> <p>This script shows you all the data assets available in your dataspace, including manufacturing data, supply chain information, and other business data shared by participants.</p>"},{"location":"getting-started/getting-started/#request-the-created-asset-and-verify","title":"Request the Created Asset and Verify","text":"<p>Let's request access to the asset we just created and get the data:</p> <p>Create a file called <code>request_asset.py</code>:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import BaseConnectorProviderService\nfrom tractusx_sdk.dataspace.services.connector.service_factory import ServiceFactory\nimport logging\n\n# Step 1: Configure your connector settings\n# Replace these with your actual connector details\nconsumer_connector_controlplane_hostname = \"https://connector.example.com\"\nconsumer_connector_controlplane_management_api = \"/management\"\nconsumer_api_key_header = \"X-Api-Key\"\nconsumer_api_key = \"your-api-key\"\nconsumer_dataspace_version = \"jupiter\"  # or \"saturn\" for latest\n\n# Step 2: Set up headers for API authentication\nconsumer_connector_headers = {\n    consumer_api_key_header: consumer_api_key,\n    \"Content-Type\": \"application/json\"\n}\n\n# Step 3: Initialize logger\nlogger = logging.getLogger(__name__)\n\n\n\n# Step 4: Create connector service using ServiceFactory\nprovider_connector_service: BaseConnectorProviderService = ServiceFactory.get_connector_provider_service(\n    dataspace_version=consumer_dataspace_version,\n    base_url=consumer_connector_controlplane_hostname,\n    dma_path=consumer_connector_controlplane_management_api,\n    headers=consumer_connector_headers,\n    logger=logger,\n    verbose=True\n)\n\n# Step 5: Test the connection\ntry:\n    print(\"\ud83d\udd17 Connecting to dataspace...\")\n\n    # assets = provider_connector_service.assets.get_all()\n\n    # # Check if assets is a Response object and extract the data\n    # if hasattr(assets, 'json'):\n    #     # If it's a Response object, get the JSON data\n    #     assets_data = assets.json()\n    #     print(\"\ud83d\udce6 Assets data:\")\n    #     print(assets_data)\n    # elif hasattr(assets, 'status_code'):\n    #     # If it's a Response object but JSON parsing fails\n    #     print(f\"\u2705 Response status: {assets.status_code}\")\n    #     print(f\"\ud83d\udcc4 Raw response text: {assets.text}\")\n    # else:\n    #     # If it's already parsed data\n    #     print(\"\ud83d\udce6 Assets:\")\n    #     print(assets)\n\n    # response = provider_connector_service.create_asset(\n    #     asset_id=\"test-asset-001\",\n    #     base_url=\"https://example.com/data\",\n    #     dct_type=\"example-type\",\n    #     version=\"3.0\"\n    # )\n\n    # print(\"\u2705 Connection successful!\")\n    # print(\"\ud83d\udce6 Created Asset:\")\n    # print(response)\n\n    response_specific = provider_connector_service.assets.get_by_id(\"test-asset-001\")\n    print(\"\u2705 Connection successful!\")\n    print(\"\ud83d\udce6 Retrieved Asset by ID:\")\n    print(response_specific.json())\n\nexcept Exception as e:\n    print(f\"\u274c Connection failed: {e}\")\n    print(\"\ud83d\udca1 Check your configuration values and network connection\")\n</code></pre> <p>Run the script:</p> Bash<pre><code>python connect.py\n</code></pre> <p>Data Access Complete!</p> <p>Congratulations! You've successfully created an asset and accessed it.</p>"},{"location":"getting-started/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues, here are common solutions:</p> Import Errors <p>Problem: <code>ModuleNotFoundError: No module named 'tractusx_sdk'</code></p> <p>Solutions: - Ensure you activated your virtual environment - Reinstall the SDK: <code>pip uninstall tractusx-sdk &amp;&amp; pip install tractusx-sdk</code> - Check Python version: <code>python --version</code> (should be 3.12+)</p> Connection Errors <p>Problem: Cannot connect to connector</p> <p>Solutions: - Verify you have valid connector credentials - Check network connectivity - Contact your dataspace administrator for correct configuration</p>"},{"location":"getting-started/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have the SDK installed and verified:</p> <ol> <li>\ud83d\udcda Explore Libraries: Learn about the Dataspace Library for connector services</li> <li>\ud83d\udd0d Read Services Documentation: Check out connector services for detailed API reference</li> <li>\ud83d\udcd6 SDK Structure: Understand the SDK architecture</li> <li>\ud83e\udd1d Join Community: Connect with other developers in our discussions</li> </ol>"},{"location":"getting-started/getting-started/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/","title":"Index","text":""},{"location":"user-guide/#recommended-uses-of-sdk","title":"Recommended Uses of SDK","text":"<p>The SDK was developed with the following use cases in mind, but we hope it is useful beyond this list:</p> <ul> <li>Simplified Interaction with Tractus-X Components: Provides an easy-to-use interface for interacting with Eclipse Tractus-X components, reducing the complexity of direct API calls.</li> <li>Abstracted Component Management: Avoid the need for deep exploration of individual components or their releases. The SDK handles compatibility and updates, allowing developers to focus on their core tasks.</li> <li>Standardized Protocols and Security: Ensure secure communication and compliance with standards like AAS 3.0 by leveraging built-in protocol and security configurations.</li> <li>Interoperability: Enable seamless integration with external systems by supporting standardized formats, references, and protocols.</li> </ul> <p>We encourage users to explore and adapt the SDK to their specific needs!</p>"},{"location":"user-guide/#usage-tutorials","title":"Usage tutorials","text":"<p>TBD</p>"},{"location":"user-guide/#implementation-examples","title":"Implementation Examples","text":"<ul> <li>Industry Core Hub (Dataspace Connector)</li> <li>Industry Core Hub (Industry DTR)</li> <li>Industry Core Hub (Industry Submodel Service)</li> </ul>"},{"location":"user-guide/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/sdk-structure-and-components/","title":"SDK Structure and Components","text":""},{"location":"user-guide/sdk-structure-and-components/#sdk-structure-and-components","title":"SDK Structure and Components","text":"<p>The Eclipse Tractus-X SDK follows a modular architecture that provides clean separation of concerns and maximum flexibility for dataspace application development.</p>"},{"location":"user-guide/sdk-structure-and-components/#overview","title":"Overview","text":"<p>The SDK is organized into three main libraries, each serving distinct purposes:</p> <ul> <li> <p> Dataspace Library</p> <p>Core connector services and Eclipse Tractus-X Connector integration for basic dataspace operations.</p> <p> Learn more</p> </li> <li> <p> Industry Library</p> <p>Digital Twin Registry and Submodel Server integration for industry-specific data models and standards.</p> <p> Learn more</p> </li> <li> <p> Extensions Library</p> <p>Use case-specific extensions and add-on functionality for custom business logic implementations.</p> <p> Learn more</p> </li> </ul>"},{"location":"user-guide/sdk-structure-and-components/#architecture-layers","title":"Architecture Layers","text":"<p>The SDK implements a layered architecture that promotes clean code organization and maintainability:</p> <pre><code>graph LR\n    A[\"\ud83c\udfaf Your App\"] --&gt; B[\"\ud83d\udccb Services\"]\n    B --&gt; C[\"\ud83c\udfae Controllers\"]\n    C --&gt; D[\"\ud83d\udd0c Adapters\"]\n    D --&gt; E[\"\ud83c\udf10 EDC Connector\"]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style E fill:#e8f5e8</code></pre>"},{"location":"user-guide/sdk-structure-and-components/#library-structure","title":"Library Structure","text":""},{"location":"user-guide/sdk-structure-and-components/#1-dataspace-library-tractusx_sdkdataspace","title":"1. Dataspace Library (<code>tractusx_sdk.dataspace</code>)","text":"<p>The foundation layer for all dataspace interactions:</p> Text Only<pre><code>tractusx_sdk/dataspace/\n\u251c\u2500\u2500 adapters/          # HTTP communication adapters\n\u2502   \u2514\u2500\u2500 connector/     # Connector-specific adapters\n\u251c\u2500\u2500 controllers/       # API request handlers\n\u2502   \u2514\u2500\u2500 connector/     # Connector API controllers\n\u251c\u2500\u2500 managers/          # Authentication and connection management\n\u2502   \u2514\u2500\u2500 connection/    # Connection lifecycle management\n\u251c\u2500\u2500 models/            # Data models and schemas\n\u2502   \u251c\u2500\u2500 connection/    # Connection-related models\n\u2502   \u2514\u2500\u2500 connector/     # Connector data models\n\u251c\u2500\u2500 services/          # High-level business logic\n\u2502   \u251c\u2500\u2500 connector/     # Connector service implementations\n\u2502   \u2514\u2500\u2500 discovery/     # Discovery service integrations\n\u2514\u2500\u2500 tools/             # Utility functions and helpers\n</code></pre> <p>Key Components:</p> <ul> <li>Service Factory - Creates connector services with proper configuration</li> <li>Base Connector Service - Core abstraction for EDC connector interactions</li> <li>Connection Managers - Handles connection lifecycle and authentication</li> <li>HTTP Adapters - Low-level HTTP communication with connectors</li> <li>Discovery Services - Dataspace discovery and catalog operations</li> </ul>"},{"location":"user-guide/sdk-structure-and-components/#2-industry-library-tractusx_sdkindustry","title":"2. Industry Library (<code>tractusx_sdk.industry</code>)","text":"<p>Specialized components for industry-specific use cases:</p> Text Only<pre><code>tractusx_sdk/industry/\n\u251c\u2500\u2500 adapters/          # Industry-specific adapters\n\u2502   \u2514\u2500\u2500 submodel_adapters/  # Submodel service adapters\n\u251c\u2500\u2500 models/            # Industry data models\n\u2502   \u251c\u2500\u2500 aas/          # Asset Administration Shell models\n\u2502   \u2514\u2500\u2500 v3/           # Version 3 specific models\n\u2514\u2500\u2500 services/          # Industry services\n    \u2514\u2500\u2500 discovery/     # Industry discovery services\n</code></pre> <p>Key Features:</p> <ul> <li>Digital Twin Registry - Integration with DTR for asset discovery</li> <li>Asset Administration Shell - AAS 3.0 compliant implementations</li> <li>BPN Discovery - Business Partner Number resolution services</li> <li>Submodel Lifecycle - Complete submodel management operations</li> <li>Industry Models - Specialized data models and schemas</li> </ul>"},{"location":"user-guide/sdk-structure-and-components/#3-extensions-library-tractusx_sdkextensions","title":"3. Extensions Library (<code>tractusx_sdk.extensions</code>)","text":"<p>Extensible framework for custom use cases:</p> Text Only<pre><code>tractusx_sdk/extensions/\n\u2514\u2500\u2500 semantics/         # Semantic model extensions\n</code></pre> <p>Capabilities:</p> <ul> <li>Custom Logic - Integration of domain-specific business rules</li> <li>Semantic Models - Advanced semantic model processing</li> <li>Workflow Engine - Use case-specific process automation</li> <li>Plugin Architecture - Extensible framework support</li> <li>Domain Extensions - Industry-specific customizations</li> </ul>"},{"location":"user-guide/sdk-structure-and-components/#design-patterns","title":"Design Patterns","text":""},{"location":"user-guide/sdk-structure-and-components/#factory-pattern","title":"Factory Pattern","text":"<p>The SDK extensively uses the Factory Pattern for service creation:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector.service_factory import ServiceFactory\n\n# Create connector service\nconnector_service = ServiceFactory.get_connector_consumer_service(\n    dataspace_version=\"jupiter\",\n    base_url=\"https://connector.example.com\",\n    dma_path=\"/management\",\n    headers=headers,\n    logger=logger\n)\n</code></pre>"},{"location":"user-guide/sdk-structure-and-components/#adapter-pattern","title":"Adapter Pattern","text":"<p>Adapters provide clean abstractions over external protocols:</p> Python<pre><code># High-level service call\nassets = connector_service.get_assets()\n\n# Internally uses adapters for HTTP communication\n# \u2192 Controller handles business logic\n# \u2192 Adapter handles HTTP protocol details\n# \u2192 External EDC connector receives request\n</code></pre>"},{"location":"user-guide/sdk-structure-and-components/#multi-version-support","title":"Multi-Version Support","text":"<p>The SDK supports multiple dataspace versions for backward compatibility:</p> <ul> <li>Jupiter - Stable version for production use</li> <li>Saturn - Latest version with newest features</li> </ul> Python<pre><code># Version-specific service creation\njupiter_service = ServiceFactory.get_connector_consumer_service(\n    dataspace_version=\"jupiter\",  # Stable\n    # ... other config\n)\n\nsaturn_service = ServiceFactory.get_connector_consumer_service(\n    dataspace_version=\"saturn\",   # Latest\n    # ... other config\n)\n</code></pre>"},{"location":"user-guide/sdk-structure-and-components/#integration-patterns","title":"Integration Patterns","text":""},{"location":"user-guide/sdk-structure-and-components/#complete-dataspace-integration","title":"Complete Dataspace Integration","text":"<pre><code>graph TD\n    A[Your Application] --&gt; B[Dataspace Foundation Library]\n    A --&gt; C[Industry Foundation Library]\n    A --&gt; D[Extensions]\n\n    B --&gt; E[EDC Connector]\n    B --&gt; F[Discovery Services]\n    B --&gt; G[Authentication]\n\n    C --&gt; H[Digital Twin Registry]\n    C --&gt; I[Submodel Services]\n\n    D --&gt; J[Custom Use Cases]\n    D --&gt; K[Semantic Extensions]</code></pre>"},{"location":"user-guide/sdk-structure-and-components/#key-benefits","title":"Key Benefits","text":"<ul> <li> <p> Quick to Start</p> <p>Get up and running in under 5 minutes with minimal configuration.</p> </li> <li> <p> Easy to Use </p> <p>Pythonic API with type hints, auto-completion, and comprehensive examples.</p> </li> <li> <p> Production Ready</p> <p>Built-in authentication, error handling, and retry mechanisms.</p> </li> <li> <p> Extensible</p> <p>Multi-version support and factory patterns for maximum flexibility.</p> </li> </ul> <p>Development Tips</p> <p>\ud83d\ude80 Start Simple: Begin with basic connector operations before adding complexity \ud83d\udd04 Reuse Services: Create service instances once and reuse them \ud83d\udcdd Enable Logging: Use verbose mode during development for better debugging \ud83e\uddea Test Incrementally: Test each component separately before integration</p>"},{"location":"user-guide/sdk-structure-and-components/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/","title":"Overview","text":""},{"location":"user-guide/dataspace-library/#dataspace-library","title":"Dataspace Library","text":"<p>The Dataspace Library is the foundation of the Eclipse Tractus-X SDK for all dataspace interactions. It provides core connector services and integration with the Eclipse Tractus-X Connector, enabling secure, standardized data exchange in the Dataspace ecosystem.</p>"},{"location":"user-guide/dataspace-library/#overview","title":"Overview","text":"<p>The Dataspace Library abstracts complex dataspace protocols and offers:</p> <ul> <li>Connector Service Factory: Easily create and configure connector services for different dataspace versions.</li> <li>Consumer &amp; Provider Services: Interact with dataspace connectors as a data consumer or provider.</li> <li>Connection Managers: Handle authentication, connection lifecycle, and secure communication.</li> <li>Controllers &amp; Adapters: Manage API requests and low-level HTTP communication with EDC connectors.</li> <li>Discovery Services: Discover available connectors and catalogs in the dataspace.</li> <li>Models &amp; Schemas: Define assets, contracts, policies, and other dataspace entities.</li> </ul>"},{"location":"user-guide/dataspace-library/#architecture","title":"Architecture","text":"<p>The library follows a modular, layered architecture:</p> Text Only<pre><code>tractusx_sdk/dataspace/\n\u251c\u2500\u2500 adapters/          # HTTP communication adapters\n\u2502   \u2514\u2500\u2500 connector/     # Connector-specific adapters\n\u251c\u2500\u2500 controllers/       # API request handlers\n\u2502   \u2514\u2500\u2500 connector/     # Connector API controllers\n\u251c\u2500\u2500 managers/          # Authentication and connection management\n\u2502   \u2514\u2500\u2500 connection/    # Connection lifecycle management\n\u251c\u2500\u2500 models/            # Data models and schemas\n\u2502   \u251c\u2500\u2500 connection/    # Connection-related models\n\u2502   \u2514\u2500\u2500 connector/     # Connector data models\n\u251c\u2500\u2500 services/          # High-level business logic\n\u2502   \u251c\u2500\u2500 connector/     # Connector service implementations\n\u2502   \u2514\u2500\u2500 discovery/     # Discovery service integrations\n\u2514\u2500\u2500 tools/             # Utility functions and helpers\n</code></pre> <p>For a deeper dive into the SDK structure, see SDK Structure and Components.</p>"},{"location":"user-guide/dataspace-library/#key-components","title":"Key Components","text":"<ul> <li>Service Factory: Dynamically creates connector services for supported dataspace versions (service_factory.py).</li> <li>BaseConnectorService: Core abstraction for EDC connector interactions (base_connector_service.py).</li> <li>Consumer/Provider Services: Specialized classes for consuming and providing data (base_connector_consumer.py, base_connector_provider.py).</li> <li>Discovery Services: Find and connect to dataspace endpoints.</li> </ul>"},{"location":"user-guide/dataspace-library/#usage","title":"Usage","text":"<p>To get started, install the SDK and import the connector service:</p> Python<pre><code>from tractusx_sdk.dataspace.services import ConnectorService\n</code></pre> <p>See the Getting Started for setup instructions and first steps.</p>"},{"location":"user-guide/dataspace-library/#further-reading","title":"Further Reading","text":"<ul> <li>Connector Services API Reference</li> <li>SDK Structure and Components</li> <li>Tractus-X SDK Documentation</li> </ul>"},{"location":"user-guide/dataspace-library/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/","title":"Authentication","text":""},{"location":"user-guide/dataspace-library/authentication/#authentication","title":"Authentication","text":"<p>The SDK handles authentication in two main ways: OAuth2 with Keycloak (for production environments) and simple API keys (for development or simpler setups).</p> <p>Both approaches use the same interface, so you can easily switch between them or create your own custom authentication method.</p>"},{"location":"user-guide/dataspace-library/authentication/#whats-covered-here","title":"What's covered here","text":"<ol> <li>AuthManagerInterface - The basic interface all auth methods use</li> <li>OAuth2Manager - For OAuth2/Keycloak authentication</li> <li>AuthManager - For simple API key authentication</li> </ol>"},{"location":"user-guide/dataspace-library/authentication/#authmanagerinterface","title":"AuthManagerInterface","text":"<p>All authentication managers work the same way because they follow this interface. Think of it as a contract - every auth manager needs to provide the same basic methods.</p>"},{"location":"user-guide/dataspace-library/authentication/#what-every-auth-manager-needs-to-do","title":"What every auth manager needs to do","text":"<p>There are just two things every authentication manager has to handle:</p> Python<pre><code>from tractusx_sdk.dataspace.managers import AuthManagerInterface\nfrom fastapi import Request\n\nclass AuthManagerInterface:\n    def add_auth_header(self, headers: dict = {}) -&gt; dict:\n        \"\"\"\n        Adds authentication information to HTTP headers.\n\n        Args:\n            headers (dict): Existing headers dictionary (optional)\n\n        Returns:\n            dict: Updated headers with authentication information\n        \"\"\"\n        raise NotImplementedError(\"add_auth_header must be implemented by subclasses\")\n\n    def is_authenticated(self, request: Request) -&gt; bool:\n        \"\"\"\n        Checks if a request is authenticated.\n\n        Args:\n            request (Request): FastAPI request object to validate\n\n        Returns:\n            bool: True if authenticated, False otherwise\n        \"\"\"\n        raise NotImplementedError(\"is_authenticated must be implemented by subclasses\")\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#making-your-own-auth-manager","title":"Making your own auth manager","text":"<p>If you need something custom, just implement these two methods:</p> Python<pre><code>class CustomAuthManager(AuthManagerInterface):\n    def __init__(self, custom_token):\n        self.custom_token = custom_token\n\n    def add_auth_header(self, headers: dict = {}) -&gt; dict:\n        headers[\"X-Custom-Auth\"] = self.custom_token\n        return headers\n\n    def is_authenticated(self, request: Request) -&gt; bool:\n        auth_header = request.headers.get(\"X-Custom-Auth\")\n        return auth_header == self.custom_token\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#why-this-approach","title":"Why this approach?","text":"<p>Having a common interface means:</p> <ul> <li>All auth managers work the same way</li> <li>You can easily swap between OAuth2 and API keys</li> <li>Testing is simpler (just mock the interface)</li> <li>You can create custom auth methods when needed</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#oauth2manager","title":"OAuth2Manager","text":"<p>This is for when you need proper OAuth2 authentication through Keycloak. It handles all the token stuff automatically.</p>"},{"location":"user-guide/dataspace-library/authentication/#what-it-does","title":"What it does","text":"<ul> <li>Connects to Keycloak servers</li> <li>Gets and refreshes tokens automatically  </li> <li>Adds Bearer tokens to your requests</li> <li>Checks if incoming requests are valid</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#how-to-use-it","title":"How to use it","text":"Python<pre><code>from tractusx_sdk.dataspace.managers import OAuth2Manager\n\n# Set it up with your Keycloak details\noauth_manager = OAuth2Manager(\n    auth_url=\"https://your-keycloak.com/auth/\",\n    realm=\"your-realm\",\n    clientid=\"your-client-id\",\n    clientsecret=\"your-client-secret\"\n)\n\n# It connects automatically, but you can reconnect if needed\noauth_manager.connect(auth_url, realm, clientid, clientsecret)\n\n# Get a token\ntoken = oauth_manager.get_token()\n\n# Add auth to your request headers\nheaders = {\"Content-Type\": \"application/json\"}\nauthenticated_headers = oauth_manager.add_auth_header(headers)\n# Now headers includes: \"Authorization\": \"Bearer your-token\"\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#methods-you-can-use","title":"Methods you can use","text":"Method What it does <code>connect(auth_url, realm, clientid, clientsecret)</code> Connect to Keycloak <code>get_token(scope=\"openid profile email\")</code> Get an access token <code>add_auth_header(headers)</code> Add Bearer token to your headers <code>is_authenticated(request)</code> Check if a request is valid"},{"location":"user-guide/dataspace-library/authentication/#whats-inside","title":"What's inside","text":"Property What it is <code>connected</code> True if connected to Keycloak <code>token</code> Current token info <code>clientid</code> Your client ID <code>clientsecret</code> Your client secret"},{"location":"user-guide/dataspace-library/authentication/#when-things-go-wrong","title":"When things go wrong","text":"Python<pre><code>try:\n    oauth_manager = OAuth2Manager(\n        auth_url=\"https://your-keycloak.com/auth/\",\n        realm=\"your-realm\",\n        clientid=\"your-client-id\",\n        clientsecret=\"your-client-secret\"\n    )\n\n    token = oauth_manager.get_token()\n    print(\"Got token successfully!\")\n\nexcept ConnectionError as e:\n    print(f\"Can't connect to Keycloak: {e}\")\nexcept RuntimeError as e:\n    print(f\"Not connected: {e}\")\nexcept ValueError as e:\n    print(f\"Couldn't get token: {e}\")\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#authmanager","title":"AuthManager","text":"<p>This is the simple option - just use an API key. Good for development or when you don't need the complexity of OAuth2.</p>"},{"location":"user-guide/dataspace-library/authentication/#how-it-works","title":"How it works","text":"<ul> <li>Uses API keys instead of tokens</li> <li>You can customize which header to use</li> <li>Can be turned off completely for testing</li> <li>Automatically adds the key to your requests</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#basic-setup","title":"Basic setup","text":"Python<pre><code>from tractusx_sdk.dataspace.managers import AuthManager\n\n# Simple API key setup\nauth_manager = AuthManager(\n    configured_api_key=\"your-secret-key\",\n    api_key_header=\"X-Api-Key\",\n    auth_enabled=True\n)\n\n# Add the key to your request headers\nheaders = {\"Content-Type\": \"application/json\"}\nauthenticated_headers = auth_manager.add_auth_header(headers)\n# Now headers includes: \"X-Api-Key\": \"your-secret-key\"\n\n# Check if a request has the right key (for FastAPI apps)\nfrom fastapi import Request\nis_valid = auth_manager.is_authenticated(request)\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#available-methods","title":"Available methods","text":"Method What it does <code>is_authenticated(request)</code> Checks if request has the right API key <code>add_auth_header(headers)</code> Adds API key to headers"},{"location":"user-guide/dataspace-library/authentication/#properties","title":"Properties","text":"Property What it is <code>configured_api_key</code> The API key you expect <code>api_key_header</code> Which header to use (default: \"X-Api-Key\") <code>auth_enabled</code> Whether auth is turned on"},{"location":"user-guide/dataspace-library/authentication/#different-setups","title":"Different setups","text":"Python<pre><code># For production - auth required\nprod_auth = AuthManager(\n    configured_api_key=\"secure-production-key\",\n    api_key_header=\"X-Api-Key\",\n    auth_enabled=True\n)\n\n# For development - no auth needed\ndev_auth = AuthManager(\n    configured_api_key=\"dev-key\", \n    auth_enabled=False  # Skips auth checks\n)\n\n# Custom header name\ncustom_auth = AuthManager(\n    configured_api_key=\"my-key\",\n    api_key_header=\"Authorization\",  # Use different header\n    auth_enabled=True\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#using-with-other-services","title":"Using with other services","text":"<p>You'll usually pass auth managers to other SDK services:</p> Python<pre><code>from tractusx_sdk.dataspace.managers import OAuth2Manager\nfrom tractusx_sdk.dataspace.services.discovery import DiscoveryFinderService\n\n# Set up OAuth2\noauth_manager = OAuth2Manager(\n    auth_url=\"https://your-keycloak.com/auth/\",\n    realm=\"CX-Central\",\n    clientid=\"your-client-id\",\n    clientsecret=\"your-client-secret\"\n)\n\n# Pass it to other services\ndiscovery_service = DiscoveryFinderService(\n    url=\"https://discovery-finder.example.com/api/v1.0\",\n    oauth=oauth_manager\n)\n\n# The service handles auth automatically\ndiscovery_urls = discovery_service.find_discovery_urls(keys=[\"bpn\"])\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#tips-and-best-practices","title":"Tips and best practices","text":""},{"location":"user-guide/dataspace-library/authentication/#security-stuff","title":"Security stuff","text":"<ul> <li>Use environment variables for secrets (never hardcode them)</li> <li>Always use HTTPS in production</li> <li>OAuth2 tokens get refreshed automatically</li> <li>Change API keys regularly</li> </ul> Python<pre><code>import os\n\n# Load from environment variables\noauth_manager = OAuth2Manager(\n    auth_url=os.getenv(\"KEYCLOAK_URL\"),\n    realm=os.getenv(\"KEYCLOAK_REALM\"),\n    clientid=os.getenv(\"CLIENT_ID\"),\n    clientsecret=os.getenv(\"CLIENT_SECRET\")\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#error-handling","title":"Error handling","text":"<ul> <li>Check if you're connected before making calls</li> <li>OAuth2Manager handles token expiry for you</li> <li>Plan for when auth services are down</li> </ul> Python<pre><code>def safe_api_call(oauth_manager, api_function):\n    try:\n        if not oauth_manager.connected:\n            print(\"Not connected to auth service\")\n            return None\n\n        return api_function()\n\n    except ConnectionError:\n        print(\"Auth service is down\")\n        return None\n    except RuntimeError as e:\n        print(f\"Auth problem: {e}\")\n        return None\n</code></pre>"},{"location":"user-guide/dataspace-library/authentication/#performance","title":"Performance","text":"<ul> <li>Create auth managers once and reuse them</li> <li>Tokens are cached automatically</li> <li>Connection pooling is handled for you</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#common-problems","title":"Common problems","text":""},{"location":"user-guide/dataspace-library/authentication/#oauth2-issues","title":"OAuth2 issues","text":""},{"location":"user-guide/dataspace-library/authentication/#cant-connect-to-keycloak","title":"Can't connect to Keycloak","text":"<ul> <li>Double-check your <code>auth_url</code></li> <li>Make sure you can reach the server from your network</li> <li>Verify the realm name exists</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#cant-get-tokens","title":"Can't get tokens","text":"<ul> <li>Check your <code>clientid</code> and <code>clientsecret</code> are right</li> <li>Look at the client settings in Keycloak</li> <li>Make sure the client has the right permissions</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#not-connected-errors","title":"Not connected errors","text":"<ul> <li>Call <code>connect()</code> before doing anything else</li> <li>Check if the initial setup worked</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#api-key-issues","title":"API key issues","text":""},{"location":"user-guide/dataspace-library/authentication/#authentication-is-not-enabled","title":"Authentication is not enabled","text":"<ul> <li>Set <code>auth_enabled=True</code> when creating the AuthManager</li> <li>This happens when you try to get headers but auth is turned off</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#auth-keeps-failing","title":"Auth keeps failing","text":"<ul> <li>Make sure the API key is exactly the same</li> <li>Check you're using the right header name</li> <li>Verify the key is actually being sent in requests</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#further-reading","title":"Further Reading","text":"<ul> <li>Discovery Services - Learn how to use authentication with discovery services</li> <li>Connector Services - Using authentication with connector services</li> <li>Dataspace Library Overview - Complete overview of the dataspace library</li> <li>Getting Started Guide - Start here if you're new to the SDK</li> </ul>"},{"location":"user-guide/dataspace-library/authentication/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/connector/controllers/","title":"Controllers","text":""},{"location":"user-guide/dataspace-library/connector/controllers/#connector-controllers","title":"Connector Controllers","text":"<p>This page provides a comprehensive overview of the Connector controllers in the Tractus-X SDK. These controllers are the main building blocks for interacting with dataspace entities managed by the Eclipse Tractus-X Connector, such as assets, contracts, policies, and transfer processes. Whether you are managing data, negotiating contracts, or monitoring connector health, connector controllers offer a unified and extensible API for all major dataspace operations. Use this guide to understand which connector controller fits your use case, how to instantiate them, and what methods are available for each type.</p>"},{"location":"user-guide/dataspace-library/connector/controllers/#purpose","title":"Purpose","text":"<p>Connector Controllers provide the main interface for interacting with dataspace entities such as assets, contracts, policies, and transfer processes. They encapsulate the logic for CRUD operations, queries, and process management, abstracting the underlying HTTP/API details and ensuring consistency across dataspace versions.</p> <p>Controllers are responsible for:</p> <ul> <li>Managing dataspace entities (assets, contracts, policies, etc.)</li> <li>Querying and retrieving entity details</li> <li>Orchestrating data transfer and negotiation processes</li> </ul> <p>They are versioned and extensible, supporting multiple dataspace standards (e.g., \"jupiter\", \"saturn\").</p>"},{"location":"user-guide/dataspace-library/connector/controllers/#controller-types-supported-versions-and-methods","title":"Controller Types, Supported Versions, and Methods","text":"<p>The following table summarizes all available controller types in the Tractus-X SDK, the dataspace protocol versions they support, and the key methods they provide. The rightmost column describes the main purpose of each controller, helping you quickly identify which controller to use for a given task.</p> <p>Tip</p> <p>Most controllers are available for both the \"jupiter\" and \"saturn\" dataspace versions. Some advanced controllers (such as Dataplane Selector, Application Observability, Connector Discovery, and Protocol Version) are specific to the \"saturn\" version and provide specialized functionality for connector management and monitoring.</p> Controller Type Supported Versions Methods Description Asset Controller Jupiter, Saturn <code>create</code>, <code>update</code>, <code>get_by_id</code>, <code>delete</code>, <code>get_all</code>, <code>query</code> Manages assets: create, update, retrieve, delete, and query Catalog Controller Jupiter, Saturn <code>get_catalog</code> Retrieves catalogs of available assets from counterparties Contract Agreement Controller Jupiter, Saturn <code>get_negotiation_by_id</code>, <code>get_by_id</code>, <code>get_all</code>, <code>query</code> Manages contract agreements and negotiations Contract Definition Controller Jupiter, Saturn <code>create</code>, <code>update</code>, <code>get_by_id</code>, <code>delete</code>, <code>get_all</code>, <code>query</code> Manages contract definitions: create, update, retrieve, delete, and query Contract Negotiation Controller Jupiter, Saturn <code>create</code>, <code>terminate_by_id</code>, <code>get_agreement_by_negotiation_id</code>, <code>get_by_id</code>, <code>get_all</code>, <code>get_state_by_id</code>, <code>query</code> Handles contract negotiation lifecycle and agreement retrieval EDR Controller Jupiter, Saturn <code>get_data_address</code>, <code>refresh</code>, <code>create</code>, <code>get_all</code>, <code>delete</code>, <code>query</code> Manages Endpoint Data References (EDRs) for secure data access Policy Controller Jupiter, Saturn <code>create</code>, <code>update</code>, <code>get_by_id</code>, <code>delete</code>, <code>get_all</code>, <code>query</code> Manages policies: create, update, retrieve, delete, and query Transfer Process Controller Jupiter, Saturn <code>create</code>, <code>terminate_by_id</code>, <code>deprovision_by_id</code>, <code>get_by_id</code>, <code>get_all</code>, <code>query</code>, <code>get_state_by_id</code> Orchestrates data transfer processes between dataspace participants Dataplane Selector Controller Saturn <code>get_all_v3</code>, <code>get_all_v4alpha</code> Manages and queries available dataplanes for data transfer Application Observability Controller Saturn <code>get_health</code>, <code>get_liveness</code> Provides health and liveness checks for connector applications Connector Discovery Controller Saturn <code>get_discover</code> Discovers connectors and their protocol versions in the dataspace Protocol Version Controller Saturn <code>get_discover</code> Queries supported protocol versions for connectors"},{"location":"user-guide/dataspace-library/connector/controllers/#instantiation-required-attributes","title":"Instantiation &amp; Required Attributes","text":"<p>Controllers are typically instantiated via the <code>ControllerFactory</code>, which selects the correct implementation for the dataspace version and entity type.</p> <p>Required attributes for instantiation:</p> Attribute Type Description <code>dataspace_version</code> <code>str</code> Dataspace protocol version (e.g., <code>\"jupiter\"</code>, <code>\"saturn\"</code>) <code>adapter</code> <code>BaseDmaAdapter</code> Adapter for HTTP/API communication <code>endpoint_url</code> <code>str</code> API endpoint for the controller <code>model</code> <code>Model</code> Entity model for operations (varies by controller) <code>kwargs</code> <code>dict</code> (optional) Additional parameters for customization"},{"location":"user-guide/dataspace-library/connector/controllers/#example","title":"Example","text":"Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\nfrom tractusx_sdk.dataspace.adapters.connector.adapter_factory import AdapterFactory\n\n# Instantiate the DMA adapter for the desired dataspace version and connector\nmy_adapter = AdapterFactory.get_dma_adapter(\n    dataspace_version=\"jupiter\",\n    base_url=\"https://my-connector-controlplane.url\",\n    dma_path=\"/management\",\n    headers={\"X-Api-Key\": \"my-api-key\", \"Content-Type\": \"application/json\"}\n)\n\n# Instantiate the asset controller using the adapter\nasset_controller = ControllerFactory.get_asset_controller(\n    dataspace_version=\"jupiter\",\n    adapter=my_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/connector/controllers/#controller-methods-reference","title":"Controller Methods Reference","text":"Method Name Required Attributes / Parameters Controllers Implementing Method Description <code>create</code> <code>Model</code> Asset, Contract Definition, Policy, Contract Negotiation, Transfer Process, EDR Registers a new entity (asset, contract, policy, etc.) <code>update</code> <code>Model</code> Asset, Contract Definition, Policy Updates metadata or properties of an existing entity <code>get_by_id</code> <code>oid</code> Asset, Contract Definition, Policy, Contract Agreement, Contract Negotiation, Transfer Process, EDR Retrieves details of a specific entity by its unique identifier <code>delete</code> <code>oid</code> Asset, Contract Definition, Policy, EDR Deletes an entity by its unique identifier <code>get_all</code> Asset, Contract Definition, Policy, Contract Agreement, Contract Negotiation, Transfer Process, EDR Retrieves a list of all entities currently registered <code>query</code> <code>QuerySpecModel</code> (optional) Asset, Contract Definition, Policy, Contract Agreement, Contract Negotiation, Transfer Process, EDR Queries entities based on specific criteria <code>get_state_by_id</code> <code>oid</code> Contract Negotiation, Transfer Process Retrieves the current state of a specific entity <code>terminate_by_id</code> <code>oid</code>, <code>Model</code> Contract Negotiation, Transfer Process Terminates an ongoing process by its unique identifier <code>refresh</code> <code>oid</code> EDR Refreshes the Endpoint Data Reference (EDR) for an entity <code>get_data_address</code> <code>oid</code> EDR Retrieves the data address associated with an asset or contract <code>get_catalog</code> <code>CatalogModel</code> Catalog Retrieves catalogs of available assets from counterparties <code>get_negotiation_by_id</code> <code>oid</code> Contract Agreement Retrieves negotiation details for a contract agreement <code>get_agreement_by_negotiation_id</code> <code>oid</code> Contract Negotiation Retrieves contract agreement by negotiation ID <code>deprovision_by_id</code> <code>oid</code> Transfer Process Deprovisions resources associated with a transfer process <code>get_all_v3</code> Dataplane Selector (Saturn) Retrieves all dataplanes (v3 API) <code>get_all_v4alpha</code> Dataplane Selector (Saturn) Retrieves all dataplanes (v4alpha API) <code>get_health</code> Application Observability (Saturn) Provides health check for connector application <code>get_liveness</code> Application Observability (Saturn) Provides liveness check for connector application <code>get_readiness</code> Application Observability (Saturn) Provides readiness check for connector application <code>get_startup</code> Application Observability (Saturn) Provides startup check for connector application <code>get_discover</code> <code>Model</code> Connector Discovery, Protocol Version (Saturn) Discovers connectors or protocol versions in the dataspace <code>evaluation_plan</code> <code>oid</code>, <code>EvaluationPolicyModel</code> Policy (Saturn) Evaluates a policy plan for a given policy definition <code>validate_policy</code> <code>oid</code> Policy (Saturn) Validates a policy definition <p>Info</p> <ul> <li><code>Model</code> refers to the specific model type for the controller (e.g., <code>AssetModel</code>, <code>ContractDefinitionModel</code>, <code>PolicyModel</code>, etc.)</li> <li><code>oid</code> is the unique identifier for the entity.</li> <li>Not all controllers implement every method; see specific controller documentation for details.</li> </ul>"},{"location":"user-guide/dataspace-library/connector/controllers/#further-reading","title":"Further Reading","text":"<ul> <li>Dataspace Library Overview</li> <li>SDK Structure and Components</li> <li>Connector Services</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/connector/controllers/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/connector/managers/","title":"Managers","text":""},{"location":"user-guide/dataspace-library/connector/managers/#connector-managers","title":"Connector Managers","text":"<p>Connector Managers in the Tractus-X SDK provide abstractions for connection state management, enabling flexible and robust handling of Endpoint Data Reference (EDR) lifecycles. This section guides you through the available manager types, their purposes, and how to select the right implementation for your deployment scenario.</p>"},{"location":"user-guide/dataspace-library/connector/managers/#alternative-connection-managers","title":"Alternative Connection Managers","text":"<p>Depending on your operational requirements, you may choose between several connection manager implementations. While <code>MemoryConnectionManager</code> is connector-specific and recommended for contract negotiation and EDR lifecycle, two alternative managers are available for different persistence needs:</p> <ul> <li>FileSystemConnectionManager: Persists EDR connections to disk using JSON files. Use when you need simple, file-based persistence and durability across restarts.</li> <li>PostgresConnectionManager: Persists EDR connections in a PostgreSQL database. Use for scalable, multi-process, or production deployments requiring robust database-backed state.</li> </ul> <p>All three managers share the same interface (<code>add_connection</code>, <code>get_connection</code>, <code>delete_connection</code>, etc.), so you can switch between them depending on your deployment scenario.</p>"},{"location":"user-guide/dataspace-library/connector/managers/#purpose","title":"Purpose","text":"<p>The following managers encapsulate logic for:</p> <ul> <li>Managing EDR (Endpoint Data Reference) connection state for dataspace connectors</li> <li>Providing thread-safe, file-based, or database-backed persistence for EDR connections</li> <li>Supporting flexible deployment scenarios: in-memory (fast, ephemeral), file-based (durable), or database (scalable)</li> <li>Allowing seamless switching between connection manager implementations depending on operational requirements</li> </ul> <p>Below, you'll find a comparison of the available connection managers, followed by detailed tables outlining their attributes and methods. This structure will help you quickly identify which manager best fits your needs and how to use it in your project.</p>"},{"location":"user-guide/dataspace-library/connector/managers/#connection-manager-comparison","title":"Connection Manager Comparison","text":"Manager Name Persistence Type Use Case / Description <code>MemoryConnectionManager</code> In-memory Thread-safe, connector-specific. Fastest for contract negotiation and EDR lifecycle. <code>FileSystemConnectionManager</code> File-based (JSON) Durable across restarts, simple deployments, local development. <code>PostgresConnectionManager</code> Database Scalable, multi-process, production-grade deployments."},{"location":"user-guide/dataspace-library/connector/managers/#key-attributes-by-manager","title":"Key Attributes by Manager","text":"Manager Name Attributes Methods <code>MemoryConnectionManager</code> <code>open_connections</code>, <code>provider_id_key</code>, <code>edrs_key</code>, <code>logger</code>, <code>verbose</code>, <code>_lock</code> <code>add_connection()</code>, <code>get_connection()</code>, <code>get_connection_transfer_id()</code>, <code>delete_connection()</code> <code>FileSystemConnectionManager</code> <code>file_path</code>, <code>persist_interval</code>, <code>lock</code>, <code>_stop_event</code>, <code>_last_loaded_hash</code>, <code>open_connections</code> <code>add_connection()</code>, <code>get_connection()</code>, <code>get_connection_transfer_id()</code>, <code>delete_connection()</code> <code>PostgresConnectionManager</code> <code>engine</code>, <code>table_name</code> <code>add_connection()</code>, <code>get_connection()</code>, <code>get_connection_transfer_id()</code>, <code>delete_connection()</code>"},{"location":"user-guide/dataspace-library/connector/managers/#manager-instantiation-example","title":"Manager Instantiation Example","text":"Python<pre><code>from tractusx_sdk.dataspace.managers.connection.memory import MemoryConnectionManager\nfrom tractusx_sdk.dataspace.managers.connection.file_system import FileSystemConnectionManager\nfrom tractusx_sdk.dataspace.managers.connection.postgres import PostgresConnectionManager\n\n# In-memory connection manager for connector operations\nconnection_manager = MemoryConnectionManager(verbose=True)\n\n# File-based connection manager\nfs_connection_manager = FileSystemConnectionManager(file_path=\"/tmp/edr_connections.json\", persist_interval=60)\n\n# Postgres-backed connection manager\npg_connection_manager = PostgresConnectionManager(engine=my_engine, table_name=\"edr_connections\")\n</code></pre>"},{"location":"user-guide/dataspace-library/connector/managers/#method-reference","title":"Method Reference","text":"Method Required Attributes Manager(s) Description <code>add_connection</code> <code>counter_party_id, counter_party_address, query_checksum, policy_checksum, connection_entry</code> All Adds a new EDR connection <code>get_connection</code> <code>counter_party_id, counter_party_address, query_checksum, policy_checksum</code> All Retrieves an EDR connection <code>get_connection_transfer_id</code> <code>counter_party_id, counter_party_address, query_checksum, policy_checksum</code> All Gets the transfer process ID for a connection <code>delete_connection</code> <code>counter_party_id, counter_party_address, query_checksum, policy_checksum</code> All Deletes an EDR connection"},{"location":"user-guide/dataspace-library/connector/managers/#attribute-reference","title":"Attribute Reference","text":""},{"location":"user-guide/dataspace-library/connector/managers/#memoryconnectionmanager","title":"MemoryConnectionManager","text":"Attribute Type Description <code>open_connections</code> <code>dict</code> In-memory cache of EDR connections <code>provider_id_key</code> <code>str</code> Key for provider ID in connection data <code>edrs_key</code> <code>str</code> Key for EDR count in open_connections <code>logger</code> <code>Logger</code> Optional logger for debug/info output <code>verbose</code> <code>bool</code> Enables verbose logging <code>_lock</code> <code>RLock</code> Thread lock for concurrency"},{"location":"user-guide/dataspace-library/connector/managers/#filesystemconnectionmanager","title":"FileSystemConnectionManager","text":"Attribute Type Description <code>file_path</code> <code>str</code> Path to JSON file for file-based persistence <code>persist_interval</code> <code>int</code> Interval (seconds) for persisting to disk <code>lock</code> <code>FileLock</code> File lock for safe concurrent access <code>_stop_event</code> <code>Event</code> Threading event to stop background tasks <code>_last_loaded_hash</code> <code>Any</code> Tracks last loaded hash for file changes <code>open_connections</code> <code>dict</code> In-memory cache of EDR connections"},{"location":"user-guide/dataspace-library/connector/managers/#postgresconnectionmanager","title":"PostgresConnectionManager","text":"Attribute Type Description <code>engine</code> <code>Engine</code> SQLAlchemy engine for database persistence <code>table_name</code> <code>str</code> Table name for storing EDR connections"},{"location":"user-guide/dataspace-library/connector/managers/#further-reading","title":"Further Reading","text":"<ul> <li>Connector Services Overview</li> <li>Connector Models</li> <li>SDK Structure and Components</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/connector/managers/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/connector/models/","title":"Models","text":""},{"location":"user-guide/dataspace-library/connector/models/#connector-models","title":"Connector Models","text":"<p>The Tractus-X SDK provides a set of connector models that define the structure and semantics of all major dataspace entities. These models are used throughout the SDK to represent assets, catalogs, contracts, policies, negotiations, and more. Each model is versioned to support both \"jupiter\" and \"saturn\" dataspace protocols, ensuring compatibility and extensibility as standards evolve.</p>"},{"location":"user-guide/dataspace-library/connector/models/#purpose","title":"Purpose","text":"<p>Connector models provide a unified way to:</p> <ul> <li>Register and manage assets and their metadata</li> <li>Discover and query catalogs and datasets</li> <li>Define, negotiate, and retire contracts</li> <li>Specify and evaluate data sharing policies</li> <li>Track and control data transfer processes</li> </ul> <p>By using these models, SDK users can interact with dataspace connectors in a consistent and reliable manner, regardless of protocol version.</p>"},{"location":"user-guide/dataspace-library/connector/models/#key-models","title":"Key Models","text":"<p>Below are the main connector models grouped by their protocol support. Saturn-specific models extend the SDK for advanced dataspace scenarios, while shared models are available for both Jupiter and Saturn connectors.</p>"},{"location":"user-guide/dataspace-library/connector/models/#saturn-specific-models","title":"Saturn-Specific Models","text":"Model Name Version Description Main Attributes (Type) <code>CatalogDatasetRequestModel</code> Saturn Request datasets from a Saturn catalog. <code>TYPE</code> (str), <code>oid</code> (str), <code>counter_party_address</code> (str), <code>counter_party_id</code> (str), <code>protocol</code> (str), <code>context</code> (dict/list/str) <code>ConnectorDiscoveryModel</code> Saturn Discover connector parameters for Saturn endpoints. <code>TYPE</code> (str), <code>bpnl</code> (str), <code>counter_party_address</code> (str), <code>context</code> (dict/list/str) <code>ContractAgreementRetirementModel</code> Saturn Retire contract agreements in Saturn dataspace. <code>agreement_id</code> (str), <code>reason</code> (str), <code>context</code> (dict/list/str) <code>EvaluationPolicyModel</code> Saturn Request policy evaluation plans for Saturn. <code>TYPE</code> (str), <code>policy_scope</code> (str), <code>context</code> (dict/list/str)"},{"location":"user-guide/dataspace-library/connector/models/#shared-models-jupiter-saturn","title":"Shared Models (Jupiter &amp; Saturn)","text":"<p>These models are available for both Jupiter and Saturn dataspace connectors and cover the most common dataspace operations:</p> Model Name Version Description Main Attributes (Type) <code>AssetModel</code> Both Represents a dataspace asset and its metadata. <code>oid</code> (str), <code>data_address</code> (dict), <code>context</code> (dict/list/str), <code>properties</code> (dict), <code>private_properties</code> (dict) <code>CatalogModel</code> Both Describes a catalog of available assets/contracts. <code>counter_party_address</code> (str), <code>counter_party_id</code> (str), <code>context</code> (dict/list/str), <code>queryspec</code> (<code>QuerySpecModel</code>), <code>protocol</code> (str) <code>ContractDefinitionModel</code> Both Defines contract terms for asset usage. <code>oid</code> (str), <code>access_policy_id</code> (str), <code>contract_policy_id</code> (str), <code>context</code> (dict/list/str), <code>assets_selector</code> (list[dict]) <code>ContractNegotiationModel</code> Both Represents a contract negotiation process. <code>counter_party_address</code> (str), <code>offer_id</code> (str), <code>offer_policy</code> (dict), <code>asset_id</code> (str), <code>provider_id</code> (str), <code>context</code> (dict/list/str) <code>PolicyModel</code> Both Specifies permissions, prohibitions, and obligations. <code>oid</code> (str), <code>context</code> (dict/list/str), <code>permissions</code> (dict/list[dict]), <code>prohibitions</code> (dict/list[dict]), <code>obligations</code> (dict/list[dict]) <code>QuerySpecModel</code> Both Specification for catalog queries and filtering. <code>TYPE</code> (str), <code>context</code> (dict/list/str), <code>offset</code> (int), <code>limit</code> (int), <code>sort_order</code> (str), <code>sort_field</code> (str), <code>filter_expression</code> (list[dict])"},{"location":"user-guide/dataspace-library/connector/models/#model-instantiation-example","title":"Model Instantiation Example","text":"<p>All connector models are instantiated using the builder pattern via the SDK's <code>ModelFactory</code>. This ensures that models are constructed with the correct attributes for the chosen dataspace version.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector import ModelFactory\n\n# Example: Create an Asset model\nasset = ModelFactory.get_asset_model(\n    dataspace_version=\"jupiter\",\n    oid=\"asset-123\",\n    data_address={\"type\": \"HttpData\"},\n    context={\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"},\n    properties={\"name\": \"My Asset\"}\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/connector/models/#model-attribute-reference","title":"Model Attribute Reference","text":"<p>The following table summarizes the most important attributes used across connector models. Refer to the SDK API docs for full details and advanced usage.</p> Attribute Type Description <code>oid</code> <code>str</code> Unique identifier for the model/entity <code>data_address</code> <code>dict</code> Data source or endpoint information for the asset <code>context</code> <code>dict</code>/<code>list</code>/<code>str</code> JSON-LD context for semantic annotation <code>properties</code> <code>dict</code> Public metadata properties <code>private_properties</code> <code>dict</code> Private metadata properties <code>counter_party_address</code> <code>str</code> Address/URL of the counterparty connector <code>counter_party_id</code> <code>str</code> Identifier of the counterparty <code>queryspec</code> <code>QuerySpecModel</code> Query specification for catalog requests and filtering <code>offset</code> <code>int</code> Pagination offset for query results <code>limit</code> <code>int</code> Pagination limit for query results <code>sort_order</code> <code>str</code> Sort order for query results (<code>ASC</code> or <code>DESC</code>) <code>sort_field</code> <code>str</code> Field to sort query results by <code>filter_expression</code> <code>list[dict]</code> List of filter expressions for advanced querying <code>protocol</code> <code>str</code> Dataspace protocol version <code>access_policy_id</code> <code>str</code> ID of the access policy for contract definition <code>contract_policy_id</code> <code>str</code> ID of the contract policy for contract definition <code>assets_selector</code> <code>list[dict]</code> Selector/filter for assets in contract definition <code>offer_id</code> <code>str</code> ID of the contract offer <code>offer_policy</code> <code>dict</code> Policy details for the contract offer <code>asset_id</code> <code>str</code> ID of the asset involved in negotiation <code>provider_id</code> <code>str</code> ID of the provider connector <code>permissions</code> <code>dict</code>/<code>list[dict]</code> Permissions specified in a policy <code>prohibitions</code> <code>dict</code>/<code>list[dict]</code> Prohibitions specified in a policy <code>obligations</code> <code>dict</code>/<code>list[dict]</code> Obligations specified in a policy"},{"location":"user-guide/dataspace-library/connector/models/#further-reading","title":"Further Reading","text":"<ul> <li>Connector Services Overview</li> <li>SDK Structure and Components</li> <li>Dataspace Library Overview</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/connector/models/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/connector/services/","title":"Services","text":""},{"location":"user-guide/dataspace-library/connector/services/#connector-services","title":"Connector Services","text":"<p>The Connector Services are a central part of the Tractus-X SDK's Dataspace Library, providing high-level abstractions for interacting with Eclipse Tractus-X Connector endpoints in a dataspace. These services enable both data consumers and providers to manage assets, contracts, policies, and data transfers in a standardized, versioned manner.</p>"},{"location":"user-guide/dataspace-library/connector/services/#purpose","title":"Purpose","text":"<p>Connector Services encapsulate the complexity of dataspace protocols, offering a unified API for:</p> <ul> <li>Provisioning and managing assets on Eclipse Tractus-X connectors</li> <li>Negotiating and managing contracts between dataspace participants</li> <li>Defining and enforcing policies for data sharing</li> <li>Initiating and monitoring data transfers across the dataspace</li> </ul> <p>They are designed to work with multiple dataspace versions (e.g., \"jupiter\", \"saturn\"), ensuring compatibility and flexibility for evolving dataspace standards.</p>"},{"location":"user-guide/dataspace-library/connector/services/#key-components","title":"Key Components","text":"<ul> <li>Service Factory: Dynamically creates connector service instances for supported dataspace versions.</li> <li>BaseConnectorService: Core abstraction for connector interactions, exposing contract, consumer, and provider interfaces.</li> <li>Consumer/Provider Services: Specialized classes for consuming and providing data, tailored to dataspace version and role.</li> <li>Controllers &amp; Adapters: Manage API requests and low-level HTTP communication with EDC connectors.</li> </ul>"},{"location":"user-guide/dataspace-library/connector/services/#provider-connector-example","title":"Provider Connector Example","text":"<p>This example demonstrates how to use the provider connector service to create and publish assets to the dataspace, making them available for discovery and sharing by other participants.</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import ServiceFactory\n\n# Provider: Create and publish an asset\nprovider_connector_service = ServiceFactory.get_connector_provider_service(\n    dataspace_version=\"jupiter\",\n    base_url=\"https://my-connector-controlplane.url\",\n    dma_path=\"/management\",\n    headers={\"X-Api-Key\": \"my-api-key\", \"Content-Type\": \"application/json\"},\n    verbose=True\n)\n\nprovider_connector_service.create_asset(\n    asset_id=\"my-asset-id\",\n    base_url=\"https://submodel-service.url/\",\n    dct_type=\"cx-taxo:SubmodelBundle\",\n    version=\"3.0\",\n    semantic_id=\"urn:samm:io.catenax.part_type_information:1.0.0#PartTypeInformation\"\n)\n</code></pre> <p>For dedicated consumer and combined usage patterns, see the examples below. For even more advanced scenarios, refer to the SDK Structure and Components and Dataspace Connector Usage.</p>"},{"location":"user-guide/dataspace-library/connector/services/#consumer-connector-example","title":"Consumer Connector Example","text":"<p>Use the consumer connector service to discover catalogs, negotiate contracts, and access data from other dataspace participants:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import ServiceFactory\n\nconsumer_connector_service = ServiceFactory.get_connector_consumer_service(\n    dataspace_version=\"jupiter\",\n    base_url=\"https://partner-connector.url\",\n    dma_path=\"/management\",\n    headers={\"X-Api-Key\": \"my-api-key\", \"Content-Type\": \"application/json\"},\n    verbose=True\n)\n\n# Discover available catalogs\ncatalog = consumer_connector_service.get_catalog(counter_party_id=\"BPNL00000003AYRE\")\n\n# Negotiate contract for asset access\ncontract = consumer_connector_service.contracts.negotiate(\n    counter_party_id=\"BPNL00000003AYRE\",\n    asset_id=\"partner-asset-id\",\n    policies=[...]\n)\n\n# Transfer data\ndata = consumer_connector_service.transfer(\n    contract_id=contract.id,\n    asset_id=\"partner-asset-id\"\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/connector/services/#combined-consumerprovider-connector-example","title":"Combined Consumer/Provider Connector Example","text":"<p>Instantiate both consumer and provider logic for seamless integration in one service:</p> Python<pre><code>from tractusx_sdk.dataspace.services.connector import ServiceFactory\n\nconnector_service = ServiceFactory.get_connector_service(\n    dataspace_version=\"jupiter\",\n    base_url=\"https://my-connector-controlplane.url\",\n    dma_path=\"/management\",\n    headers={\"X-Api-Key\": \"my-api-key\", \"Content-Type\": \"application/json\"},\n    verbose=True\n)\n\n# Provider: Create and publish an asset\nconnector_service.provider.assets.create(\n    asset_id=\"industry-asset-id\",\n    base_url=\"https://industry-data.url/\",\n    dct_type=\"cx-taxo:IndustryAsset\",\n    version=\"1.0\",\n    semantic_id=\"urn:samm:io.catenax.industry_asset:1.0.0#IndustryAsset\"\n)\n\n# Consumer: Discover and access data from a partner\ncatalog = connector_service.consumer.get_catalog(counter_party_id=\"BPNL00000003AYRE\")\n# Negotiate contract, retrieve data, etc.\n</code></pre>"},{"location":"user-guide/dataspace-library/connector/services/#supported-features","title":"Supported Features","text":"<ul> <li>Asset management (create, update, delete)</li> <li>Catalog discovery and querying</li> <li>Contract definition and negotiation</li> </ul>"},{"location":"user-guide/dataspace-library/connector/services/#connector-service-controller-methods-instantiation","title":"Connector Service Controller Methods &amp; Instantiation","text":"Service Type Controller Methods (Main) Required Attributes for Instantiation Consumer Connector Service <code>get_catalog</code>, <code>get_edr</code>, <code>get_endpoint_with_token</code>, <code>get_filter_expression</code>, <code>contract_negotiations</code>, <code>transfer_processes</code> <code>dataspace_version</code>, <code>base_url</code>, <code>dma_path</code>, <code>headers</code>, <code>connection_manager</code>, <code>verbose</code>, <code>logger</code> Provider Connector Service <code>create_asset</code>, <code>create_contract</code>, <code>create_policy</code>, <code>assets</code>, <code>contract_definitions</code>, <code>policies</code> <code>dataspace_version</code>, <code>base_url</code>, <code>dma_path</code>, <code>headers</code>, <code>verbose</code>, <code>logger</code> Combined Connector Service All consumer and provider methods via <code>.consumer</code> and <code>.provider</code> <code>dataspace_version</code>, <code>base_url</code>, <code>dma_path</code>, <code>headers</code>, <code>consumer_service</code>, <code>provider_service</code>, <code>verbose</code>, <code>logger</code> <p>Supported Versions: <code>jupiter</code>, <code>saturn</code></p> <p>Instantiation Example:</p> <p>Consumer: <code>ServiceFactory.get_connector_consumer_service(dataspace_version, base_url, dma_path, headers, connection_manager, verbose, logger)</code></p> <p>Provider: <code>ServiceFactory.get_connector_provider_service(dataspace_version, base_url, dma_path, headers, verbose, logger)</code></p> <p>Combined: <code>ServiceFactory.get_connector_service(dataspace_version, base_url, dma_path, headers, connection_manager, verbose, logger)</code></p>"},{"location":"user-guide/dataspace-library/connector/services/#connector-service-methods-reference","title":"Connector Service Methods Reference","text":"Method Name Required Attributes Description <code>get_catalog</code> <code>counter_party_id</code> Discover available catalogs from a counterparty <code>get_edr</code> <code>transfer_process_id</code> Retrieve endpoint data reference <code>get_endpoint_with_token</code> <code>asset_id</code>, <code>contract_id</code> Get endpoint with authentication token <code>get_filter_expression</code> <code>filter_params</code> Build filter expression for catalog queries <code>contract_negotiations</code> <code>counter_party_id</code>, <code>asset_id</code>, <code>policies</code> List or manage contract negotiations <code>transfer_processes</code> <code>contract_id</code>, <code>asset_id</code> List or manage data transfer processes <code>create_asset</code> <code>asset_id</code>, <code>base_url</code>, <code>dct_type</code>, <code>version</code>, <code>semantic_id</code> Create and publish an asset <code>create_contract</code> <code>contract_params</code> Create a contract definition <code>create_policy</code> <code>policy_params</code> Create a policy for data sharing <code>assets</code> <code>asset_id</code>, <code>asset_data</code> Manage assets (CRUD operations) <code>contract_definitions</code> <code>contract_id</code>, <code>contract_data</code> Manage contract definitions <code>policies</code> <code>policy_id</code>, <code>policy_data</code> Manage policies <code>transfer</code> <code>contract_id</code>, <code>asset_id</code> Initiate data transfer"},{"location":"user-guide/dataspace-library/connector/services/#connector-service-instantiation-attribute-reference","title":"Connector Service Instantiation Attribute Reference","text":"Attribute Type Description <code>dataspace_version</code> <code>str</code> Dataspace protocol version, e.g., <code>\"jupiter\"</code> or <code>\"saturn\"</code> <code>base_url</code> <code>str</code> Base URL of the EDC connector control plane <code>dma_path</code> <code>str</code> Path for connector management API (e.g., <code>/management</code>) <code>headers</code> <code>dict</code> (optional) HTTP headers for authentication and content type <code>connection_manager</code> <code>BaseConnectionManager</code> (optional, consumer/combined) Manages connector connections and state <code>verbose</code> <code>bool</code> (optional) Enables verbose logging <code>logger</code> <code>logging.Logger</code> (optional) Custom logger instance for SDK output"},{"location":"user-guide/dataspace-library/connector/services/#further-reading","title":"Further Reading","text":"<ul> <li>Dataspace Library Overview</li> <li>SDK Structure and Components</li> <li>Connector Discovery Example</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/connector/services/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/","title":"Connector Discovery Service","text":""},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#connector-discovery-service","title":"Connector Discovery Service","text":"<p>The Connector Discovery Service helps you find connector endpoints for other companies (identified by their Business Partner Numbers or BPNs) in the Tractus-X dataspace. Once you know where a partner's connector is, you can start exchanging data with them.</p>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#how-it-works","title":"How it works","text":"<p>This service works together with the Discovery Finder Service:</p> <ol> <li>The Discovery Finder tells it where to look for connector information</li> <li>It searches for connectors using a company's BPN  </li> <li>It gives you back the connector endpoints you can use to communicate</li> </ol> <p>It also caches results so you don't have to look up the same information repeatedly.</p>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#what-it-does","title":"What it does","text":"<ul> <li>Find connectors: Give it a BPN, get back connector URLs</li> <li>Cache results: Remembers previous lookups to speed things up  </li> <li>Handle authentication: Works with OAuth2 automatically</li> <li>Support different formats: Adapts to various API response formats</li> </ul> <p>The service makes it simple to find and connect to other participants in the dataspace without worrying about the underlying complexity.</p>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#available-methods","title":"Available methods","text":"Method Parameters What it does <code>find_connector_by_bpn</code> <code>bpn: str</code>, <code>bpn_key: str=\"bpn\"</code>, <code>connector_endpoint_key: str=\"connectorEndpoint\"</code> Finds connector endpoints for a BPN <code>get_discovery_url</code> <code>discovery_finder_service: DiscoveryFinderService</code>, <code>discovery_key: str</code> Gets the discovery URL for a specific key <code>invalidate_cache_entry</code> <code>connector_discovery_key: str=None</code> Clears cached results (uses default key if None) <code>flush_cache</code> None Clears all cached discovery URLs <code>get_cache_status</code> None Returns information about the current cache state"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#main-attributes","title":"Main attributes","text":"Attribute/Parameter Type Description <code>oauth</code> OAuth2Manager Handles authentication for requests (instance attribute) <code>discovery_finder_service</code> DiscoveryFinderService Used to look up discovery endpoints (instance attribute) <code>connector_discovery_key</code> str Key used for connector discovery (default: \"bpn\") (instance) <code>cache_timeout_seconds</code> int Cache timeout in seconds (default: 43200 = 12 hours) (instance) <code>verbose</code> bool Enables verbose logging (default: False) (instance) <code>logger</code> Optional[logging.Logger] Custom logger instance (default: None) (instance) <code>bpn_key</code> str Key for BPN in API response (default: \"bpn\") (method param) <code>connector_endpoint_key</code> str Key for connector endpoints in response (default: \"connectorEndpoint\") (method param)"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#getting-started","title":"Getting started","text":""},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#what-you-need","title":"What you need","text":"<p>Import the required components:</p> Python<pre><code>from tractusx_sdk.dataspace.managers import OAuth2Manager\nfrom tractusx_sdk.dataspace.services.discovery import DiscoveryFinderService, ConnectorDiscoveryService\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#basic-setup","title":"Basic setup","text":"Python<pre><code># Set up authentication\noauth_manager = OAuth2Manager(\n    realm=\"CX-Central\",\n    clientid=\"your-client-id\",\n    clientsecret=\"your-client-secret\",\n    auth_url=\"https://your-auth-server.com/auth/\"\n)\noauth_manager.connect()\n\n# Set up discovery finder (see Discovery Finder docs for details)\ndiscovery_finder = DiscoveryFinderService(\n    url=\"https://your-discovery-finder.com/api/v1.0/administration/connectors/discovery/search\",\n    oauth=oauth_manager\n)\n\n# Create connector discovery service\nconnector_discovery = ConnectorDiscoveryService(\n    oauth=oauth_manager,\n    discovery_finder_service=discovery_finder,\n    connector_discovery_key=\"bpn\",          # Optional, defaults to \"bpn\"\n    cache_timeout_seconds=43200,            # Optional, defaults to 12 hours\n    verbose=False,                          # Optional, defaults to False\n    logger=None                             # Optional, provide custom logger\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#basic-usage","title":"Basic usage","text":"Python<pre><code># Find connector endpoints for a company\nbpn = \"BPNL000000000001\"\nconnector_endpoints = connector_discovery.find_connector_by_bpn(bpn)\n\nif connector_endpoints:\n    print(f\"Found {len(connector_endpoints)} connectors for {bpn}:\")\n    for endpoint in connector_endpoints:\n        print(f\"  - {endpoint}\")\nelse:\n    print(f\"No connectors found for {bpn}\")\n</code></pre> <p>If your API uses different field names in the response, you can customize them:</p> Python<pre><code># For APIs with different response format\nconnector_endpoints = connector_discovery.find_connector_by_bpn(\n    bpn=\"BPNL000000000001\",\n    bpn_key=\"bpn\",        # If response uses different BPN field name\n    connector_endpoint_key=\"endpointUrls\"   # If response uses different endpoint field name\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#working-with-the-cache","title":"Working with the cache","text":"<p>The service caches discovery URLs to avoid repeated lookups:</p> Python<pre><code># Clear cached results for the default discovery key\nconnector_discovery.invalidate_cache_entry()\n\n# Or clear for a specific key\nconnector_discovery.invalidate_cache_entry(\"bpn\")\n\n# Clear all cached discovery URLs\ncleared_count = connector_discovery.flush_cache()\nprint(f\"Cleared {cleared_count} cached entries\")\n\n# Check cache status\ncache_info = connector_discovery.get_cache_status()\nprint(f\"Cache contains {cache_info['total_entries']} entries\")\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#error-handling","title":"Error handling","text":"Python<pre><code>try:\n    connectors = connector_discovery.find_connector_by_bpn(\"BPNL000000000001\")\n    if connectors:\n        print(f\"Found connectors: {connectors}\")\n    else:\n        print(\"No connectors found for this BPN\")\n\nexcept ConnectionError as e:\n    print(f\"Authentication problem: {e}\")\nexcept Exception as e:\n    print(f\"Something went wrong: {e}\")\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#common-problems","title":"Common problems","text":""},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#authentication-not-connected","title":"Authentication not connected","text":"<p>Make sure you connect to OAuth2 first:</p> Python<pre><code>oauth_manager.connect()  # Do this before using the service\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#connector-discovery-endpoint-not-found","title":"Connector discovery endpoint not found","text":"<ul> <li>Check your discovery finder URL is correct</li> <li>Verify the discovery key (\"bpn\") exists in the system</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#empty-results","title":"Empty results","text":"<ul> <li>The BPN might not exist in the dataspace</li> <li>The company might not have any registered connectors yet</li> <li>Try a different BPN to test if the service is working</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#debugging","title":"Debugging","text":"<p>Turn on verbose logging to see what's happening:</p> Python<pre><code>connector_discovery = ConnectorDiscoveryService(\n    oauth=oauth_manager,\n    discovery_finder_service=discovery_finder,\n    verbose=True  # This will show detailed logs\n)\n</code></pre> <p>Tip</p> <ul> <li>Cache timeout: The default 12-hour cache works for most cases, but adjust if endpoints change frequently</li> <li>Batch lookups: If you need to find multiple BPNs, consider caching the discovery service instance  </li> <li>Error handling: Always check if endpoints are returned before trying to use them</li> <li>Security: Store OAuth2 credentials in environment variables, not in code</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#further-reading","title":"Further Reading","text":"<ul> <li>Dataspace Library Overview</li> <li>Discovery Finder Service</li> <li>Connector Services</li> <li>OAuth2 Authentication</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/connector-discovery-service/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/","title":"Discovery Finder Service","text":""},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#discovery-finder-service","title":"Discovery Finder Service","text":"<p>The Discovery Finder Service helps you locate other discovery services in the Tractus-X dataspace. Think of it as a phone book for finding the right service endpoints based on what you're looking for.</p>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#what-it-does","title":"What it does","text":"<p>When you need to find a specific type of discovery service (like BPN discovery or part ID discovery), the Discovery Finder Service tells you where to find it. Instead of hardcoding URLs, you can dynamically discover the current endpoints.</p> <p>How it works:</p> <ol> <li>Ask the Discovery Finder for a specific discovery type (e.g., \"bpn\")</li> <li>Get back the URL where that service is running  </li> <li>Use that URL with other services like ConnectorDiscoveryService</li> </ol> <p>This is especially useful because service endpoints can change, and the Discovery Finder keeps track of the current locations.</p>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#what-you-can-do-with-it","title":"What you can do with it","text":"<p>The service supports different types of discoveries:</p> <ul> <li>BPN Discovery: Find connector endpoints for Business Partner Numbers</li> <li>Part ID Discovery: Locate services for manufacturer part identification  </li> <li>Custom Types: Works with any discovery type that gets added to the system</li> </ul> <p>You can also ask for multiple discovery types at once instead of making separate requests.</p>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#setting-it-up","title":"Setting it up","text":"<p>The service handles OAuth2 authentication automatically once you provide the credentials, and it's flexible enough to work with different API response formats if needed.</p>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#core-methods","title":"Core Methods","text":"Method Name Parameters Description Return Type <code>find_discovery_urls</code> <code>keys: list = [\"bpn\"]</code> Finds discovery service URLs for specified types <code>dict</code>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#getting-started","title":"Getting started","text":"<p>First, import what you need:</p> Python<pre><code>from tractusx_sdk.dataspace.managers import OAuth2Manager\nfrom tractusx_sdk.dataspace.services.discovery import DiscoveryFinderService\n</code></pre> <p>Then set up the service with your OAuth2 credentials:</p> Python<pre><code># Set up authentication\noauth_manager = OAuth2Manager(\n    realm=\"CX-Central\",\n    clientid=\"your-client-id\",\n    clientsecret=\"your-client-secret\", \n    auth_url=\"https://your-auth-server.com\"\n)\noauth_manager.connect()\n\n# Create the discovery finder\ndiscovery_finder = DiscoveryFinderService(\n    url=\"https://your-discovery-finder.com/api/v1.0/administration/connectors/discovery/search\",\n    oauth=oauth_manager\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#basic-usage","title":"Basic usage","text":"Python<pre><code># Find discovery URLs for common types\ndiscovery_urls = discovery_finder.find_discovery_urls(keys=[\"bpn\", \"manufacturerPartId\"])\nprint(discovery_urls)  # {'bpn': '...', 'manufacturerPartId': '...'}\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#error-handling","title":"Error handling","text":"<p>Things can go wrong, so wrap your calls in try/catch blocks:</p> Python<pre><code>try:\n    discovery_urls = discovery_finder.find_discovery_urls(keys=[\"bpn\"])\n    print(f\"BPN Discovery URL: {discovery_urls['bpn']}\")\n\nexcept ConnectionError as e:\n    print(f\"Authentication error: {e}\")\n    print(\"Make sure OAuth2 is connected with oauth_manager.connect()\")\n\nexcept Exception as e:\n    print(f\"Something went wrong: {e}\")\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#using-with-other-services","title":"Using with other services","text":"<p>The Discovery Finder is often used with ConnectorDiscoveryService:</p> Python<pre><code>from tractusx_sdk.dataspace.services.discovery import ConnectorDiscoveryService\n\n# Pass the discovery finder to connector discovery\nconnector_discovery = ConnectorDiscoveryService(\n    oauth=oauth_manager,\n    discovery_finder_service=discovery_finder,\n    connector_discovery_key=\"bpn\"\n)\n\n# Now find connector endpoints for a BPN\nendpoints = connector_discovery.find_connector_by_bpn(\"BPNL000000000001\")\nprint(endpoints)\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#common-problems","title":"Common problems","text":""},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#authentication-not-connected","title":"Authentication not connected","text":"<p>Make sure you call <code>oauth_manager.connect()</code> first:</p> Python<pre><code>oauth_manager.connect()  # Do this before using discovery_finder\n</code></pre>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#response-was-not-successful","title":"Response was not successful","text":"<ul> <li>Check your discovery finder URL is correct</li> <li>Verify your OAuth2 credentials</li> <li>Make sure the service is running and accessible</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#no-endpoints-found","title":"No endpoints found","text":"<ul> <li>Double-check the discovery type names (e.g., \"bpn\", not \"BPN\")</li> <li>The discovery services might not be registered yet</li> <li>Try a different discovery type to test</li> </ul> <p>Tip</p> <ul> <li>Cache the results - Discovery URLs don't change often, so you can cache them</li> <li>Batch requests - Ask for multiple discovery types at once instead of separate calls  </li> <li>Reuse instances - Create one Discovery Finder and use it throughout your app</li> <li>Use environment variables - Store OAuth2 credentials securely</li> <li>Check authentication - Make sure OAuth2 is connected before making requests</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#further-reading","title":"Further Reading","text":"<ul> <li>Dataspace Library Overview</li> <li>Connector Discovery Service</li> <li>BPN Discovery Service</li> <li>OAuth2 Authentication</li> <li>API Reference</li> </ul>"},{"location":"user-guide/dataspace-library/discovery-services/discovery-finder-service/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/","title":"Connector","text":""},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#dataspace-connector-usage","title":"Dataspace Connector Usage","text":"<ul> <li>Models<ul> <li>General Values</li> <li>Asset Model</li> <li>Catalog Model</li> <li>Contract Definition Model</li> <li>Contract Negotiation Model</li> <li>Policy Model</li> <li>QuerySpec Model</li> <li>Transfer Process Model</li> </ul> </li> <li>Services<ul> <li>Connector Service(#connector-service)</li> </ul> </li> <li>Adapters<ul> <li>DMA Adapter</li> </ul> </li> <li>Controllers<ul> <li>Asset Controller</li> <li>Catalog Controller</li> <li>Contract Agreement Controller</li> <li>Contract Definition Controller</li> <li>Contract Negotiation Controller</li> <li>EDR Controller</li> <li>Policy Controller</li> <li>Transfer Process Controller</li> <li>DMA Controller</li> </ul> </li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#models","title":"Models","text":""},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#general-values","title":"General Values","text":"<p>This section defines the configuration values, metadata, and policies required for interacting with the Eclipse Dataspace Connector (EDC). These values are used to configure endpoints, define asset details, and enforce policies for secure and compliant data exchange.</p> Python<pre><code>edc_url=\"http://dataprovider-controlplane.tx.test\"\ndataspace_version = \"jupiter\"\nheaders={\"X-Api-Key\": \"TEST1\", \"Content-Type\": \"application/json\"}\noid = \"201\"\ndata_address = {\"type\": \"test_type\", \"value\": \"test_value\"}\ncontext = {\"odrl\": \"http://www.w3.org/ns/odrl/2/\"}\nproperties = {\"prop_key\": \"prop_value\"}\nprivate_properties = {\"private_key\": \"private_value\"}\npermissions = [{\"action\": \"permission\"}]\nprohibitions = [{\"action\": \"prohibitions\"}]\nobligations = [{\"action\": \"obligations\"}]\nedc_url2=\"http://dataconsumer-1-controlplane.tx.test\"\ncounter_party_address = edc_url + \"/api/v1/dsp\"\ncounter_party_id = \"BPNL00000003AYRE\"\ncontext2 = [\n\"https://w3id.org/tractusx/policy/v1.0.0\",\n\"http://www.w3.org/ns/odrl.jsonld\",\n{ \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\" }\n]\nasset_id = \"200\"\noffer_id = \"MjAw:MjAw:ZDE5ZjA4Y2QtMzg1Ny00MTEzLWFjZjQtZmFhNWQ1MDdjYmE3\"\noffer_policy_data = {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"odrl:permission\": {\n    \"odrl:action\": {\n        \"odrl:type\": \"USE\"\n    },\n    \"odrl:constraint\": {\n        \"odrl:or\": {\n        \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n        \"odrl:operator\": {\n            \"@id\": \"odrl:eq\"\n        },\n        \"odrl:rightOperand\": \"BPNL00000003AZQP\"\n        }\n    }\n    },\n    \"odrl:prohibition\": [],\n    \"odrl:obligation\": []\n}\ncallback_addresses = []\nfilter = [\n    {\n    \"operandLeft\": \"contractNegotiationId\",\n    \"operator\": \"=\",\n    \"operandRight\": \"bf936f50-e2e7-4007-ba0d-7541be1721ae\"\n    }\n]\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#asset-model","title":"Asset Model","text":"<p>The Asset Model represents the metadata and configuration required to define an asset in the Eclipse Dataspace Connector (EDC). Assets are the core entities exchanged or managed in a dataspace, and they include details such as identifiers, data addresses, and associated properties</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\nasset = ModelFactory.get_asset_model(\n    dataspace_version=dataspace_version,\n    oid=oid,\n    data_address=data_address,\n    context=context,\n    properties=properties,\n    private_properties=private_properties\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>oid</code>: The unique identifier for the asset being defined. This is used to distinguish the asset in the dataspace.</li> <li><code>data_address</code>: A dictionary that specifies the location or type of the data associated with the asset.</li> <li><code>context</code>: Defines the namespace for interpreting metadata and policies.</li> <li><code>properties</code>: A dictionary of metadata associated with the asset. These are general properties that describe the asset.</li> <li><code>private_properties</code>: A dictionary of sensitive or restricted metadata associated with the asset. These properties are not publicly accessible.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#catalog-model","title":"Catalog Model","text":"<p>The Catalog Model represents the metadata and configuration required to query and retrieve available assets from a counterparty in the Eclipse Dataspace Connector (EDC). It is used to interact with the catalog endpoint of a counterparty to discover assets that can be negotiated or exchanged.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\ncatalog_model = ModelFactory.get_catalog_model(\n    dataspace_version=dataspace_version,\n    counter_party_address=counter_party_address,\n    counter_party_id=counter_party_id\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_1","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>counter_party_address</code>: The endpoint URL of the counterparty's catalog service. This is where the catalog query will be sent.</li> <li><code>counter_party_id</code>: The unique identifier of the counterparty. This is used to identify the counterparty in the dataspace.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-definition-model","title":"Contract Definition Model","text":"<p>The Contract Definition Model represents the metadata and configuration required to define a contract in the Eclipse Dataspace Connector (EDC). Contracts are used to enforce policies and rules for data exchange between parties in the dataspace.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\ncontract_definition = ModelFactory.get_contract_definition_model(\n    dataspace_version=dataspace_version,\n    oid=oid,\n    access_policy_id=oid,\n    contract_policy_id=oid\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_2","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>oid</code>: The unique identifier for the contract definition. This is used to distinguish the contract in the dataspace.</li> <li><code>access_policy_id</code>: The identifier of the access policy associated with the contract. This policy defines who can access the asset.</li> <li><code>contract_policy_id</code>: The identifier of the contract policy associated with the contract. This policy defines how the asset can be used.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-negotiation-model","title":"Contract Negotiation Model","text":"<p>The Contract Negotiation Model represents the metadata and configuration required to initiate and manage contract negotiations in the Eclipse Dataspace Connector (EDC). Contract negotiations are a key step in establishing agreements between parties for data exchange, ensuring that both access and usage policies are agreed upon before the transfer of data.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\ncontract_negotiation_model = ModelFactory.get_contract_negotiation_model(\n    dataspace_version=dataspace_version,\n    counter_party_address=counter_party_address,\n    offer_id=offer_id,\n    asset_id=asset_id,\n    provider_id=counter_party_id,\n    offer_policy=offer_policy_data\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_3","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>counter_party_address</code>: The endpoint URL of the counterparty's negotiation service. This is where the negotiation request will be sent.</li> <li><code>counter_party_id</code>: The unique identifier of the counterparty (e.g., Business Partner Number). This is used to identify the counterparty in the dataspace.</li> <li><code>offer_id</code>: The unique identifier of the data offer being negotiated. This links the negotiation to a specific asset and its associated policies.</li> <li><code>asset_id</code>: The unique identifier of the asset being negotiated. This ensures that the negotiation is tied to a specific resource.</li> <li><code>provider_id</code>: The unique identifier of the data provider. This is used to identify the provider in the dataspace.</li> <li><code>offer_policy</code>: A dictionary defining the policy associated with the data offer. This includes permissions, prohibitions, and obligations that govern the use of the asset.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#policy-model","title":"Policy Model","text":"<p>The Policy Model represents the metadata and configuration required to define policies in the Eclipse Dataspace Connector (EDC). Policies are used to enforce rules and constraints for data access and usage, ensuring compliance with predefined terms during data exchange</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\npolicy = ModelFactory.get_policy_model(\n    dataspace_version=dataspace_version,\n    oid=oid,\n    context=context\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_4","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>oid</code>: The unique identifier for the policy. This is used to distinguish the policy in the dataspace.</li> <li><code>context</code>: Defines the namespace for interpreting the policy.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#queryspec-model","title":"QuerySpec Model","text":"<p>The QuerySpec Model represents the metadata and configuration required to define query specifications in the Eclipse Dataspace Connector (EDC). Query specifications are used to filter and retrieve specific assets or data from a catalog or other data sources in the dataspace.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\nqueryspec_edr_model = ModelFactory.get_queryspec_model(\n    dataspace_version=dataspace_version,\n    filter_expression=filter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_5","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>filter</code>: A list of conditions used to filter the query results. Each condition specifies an operand, operator, and value.</li> <li><code>limit</code>: Specifies the maximum number of results to return.</li> <li><code>offset</code>: Specifies the starting point for the query results.</li> <li><code>sortOrder</code>: Specifies the order in which the results should be sorted. Possible values are <code>ASC</code> (ascending) or <code>DESC</code> (descending).</li> <li><code>sortField</code>: Specifies the field by which the results should be sorted.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#transfer-process-model","title":"Transfer Process Model","text":"<p>The Transfer Process Model represents the metadata and configuration required to initiate and manage data transfers in the Eclipse Dataspace Connector (EDC). The transfer process is a critical step in the dataspace, enabling the secure and compliant exchange of data between parties.</p> Python<pre><code>from tractusx_sdk.dataspace.models.connector.model_factory import ModelFactory\n\ntransfer_process_model = ModelFactory.get_transfer_process_model(\n    dataspace_version=dataspace_version,\n    counter_party_address=counter_party_address,\n    contract_id=\"6d869fc1-2538-4888-a687-249a9016e6a6\",\n    transfer_type=\"HttpData-PULL\",\n    data_destination={\"type\": \"HttpProxy\"}\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_6","title":"Explanation of Parameters","text":"<ul> <li><code>dataspace_version</code>: Specifies the version of the dataspace being used. Ensures compatibility with the EDC.</li> <li><code>counter_party_address</code>: The endpoint URL of the counterparty's transfer service. This is where the transfer request will be sent.</li> <li><code>contract_id</code>: The unique identifier of the contract associated with the data transfer. This ensures that the transfer complies with the agreed-upon terms.</li> <li><code>transfer_type</code>: Specifies the type of data transfer. For example, <code>\"HttpData-PULL\"</code> indicates a pull-based HTTP data transfer.</li> <li><code>data_destination</code>: A dictionary specifying the destination for the transferred data. For example, <code>{\"type\": \"HttpProxy\"}</code> indicates that the data will be sent to an HTTP proxy.</li> <li><code>callback_addresses</code>: A list of callback URLs to notify the client about the status or events of the transfer process. These URLs are invoked during specific stages of the transfer lifecycle, such as completion or failure.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#services","title":"Services","text":""},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#edc-service","title":"EDC Service","text":"<p>The EDC Service is a central component that provides access to various controllers in the Eclipse Dataspace Connector (EDC). These controllers allow you to manage assets, catalogs, contracts, policies, and data transfers in the dataspace. The BaseConnectorService acts as a wrapper, providing a unified interface to interact with the EDC's Data Management API.</p> Text Only<pre><code>from tractusx_sdk.dataspace.services.connector.v0_9_0.edc_service import ConnectorService\n\nservice = ConnectorService(base_url=self.base_url,\n                            dma_path=self.dma_path,\n                            headers=self.headers,)\n\nservice._asset_controller # alternative\nservice.assets()\n\nservice._catalog_controller # alternative\nservice.catalogs()\n\nservice._contract_agreement_controller # alternative\nservice.contract_agreements()\n\nservice._contract_definition_controller # alternative\nservice.contract_definitions()\n\nservice._contract_negotiation_controller # alternative\nservice.contract_negotiations()\n\nservice._edr_controller # alternative\nservice.edrs()\n\nservice._policy_controller # alternative\nservice.policies()\n\nservice._transfer_process_controller # alternative\nservice.transfer_processes()\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#available-controllers","title":"Available Controllers","text":"<ul> <li><code>service._asset_controller</code>: Manages assets in the EDC. This includes creating, updating, retrieving, and deleting assets.</li> <li><code>service._catalog_controller</code>: Interacts with the catalog of a counterparty to query and retrieve available assets.</li> <li><code>service._contract_agreement_controller</code>: Manages contract agreements established after successful negotiations.</li> <li><code>service._contract_definition_controller</code>: Handles the creation, retrieval, updating, and deletion of contract definitions.</li> <li><code>service._contract_negotiation_controller</code>: Facilitates the initiation, tracking, and management of contract negotiations.</li> <li><code>service._edr_controller</code>: Manages Endpoint Data References (EDRs) required for secure data transfers.</li> <li><code>service._policy_controller</code>: Manages policies that define rules, constraints, and permissions for data access and usage.</li> <li><code>service._transfer_process_controller</code>: Handles the initiation, monitoring, and management of data transfer processes.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#adapters","title":"Adapters","text":""},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#dma-adapter","title":"DMA Adapter","text":"<p>The DMA Adapter (Data Management API Adapter) is a utility class used to interact with the Data Management API (DMA) of the Eclipse Dataspace Connector (EDC). It provides a convenient way to send requests to the DMA endpoints, such as managing assets, policies, and contracts.</p> Python<pre><code>from tractusx_sdk.dataspace.adapters.connector.adapter_factory import AdapterFactory\n\nadapter = AdapterFactory.get_dma_adapter(\n    dataspace_version=dataspace_version,\n    base_url=edc_url,\n    dma_path=\"management\",\n    headers={\"X-Api-Key\": \"TEST2\", \"Content-Type\": \"application/json\"}\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#explanation-of-parameters_7","title":"Explanation of Parameters","text":"<ul> <li><code>base_url</code>: The base URL of the EDC's control plane. This is the root endpoint for all API requests.</li> <li><code>dma_path</code>: The path to the Data Management API. This is appended to the base_url to form the full API endpoint.</li> <li><code>headers</code>: A dictionary of HTTP headers required for API requests.</li> </ul>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#controllers","title":"Controllers","text":""},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#asset-controller","title":"Asset Controller","text":"<p>The Asset Controller is a component used to manage assets in the Eclipse Dataspace Connector (EDC). It provides methods for creating, updating, retrieving, and deleting assets, enabling seamless interaction with the EDC's Data Management API.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\nasset_controller = ControllerFactory.get_asset_controller(\n    dataspace_version=dataspace_version,\n    adapter=adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#asset-controller-methods","title":"Asset Controller Methods","text":"Method Description Parameters create Registers a new asset in the EDC AssetModel update Updates the metadata or properties of an existing asset in the EDC AssetModel get_by_id Retrieves the details of a specific asset by its unique identifier (OID). oid delete Deletes an asset from the EDC by its unique identifier (OID). oid get_all Retrieves a list of all assets currently registered in the EDC query Queries the EDC for an asset based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#catalog-controller","title":"Catalog Controller","text":"<p>The Catalog Controller is a component used to interact with the catalog of a counterparty in the Eclipse Dataspace Connector (EDC). It provides methods for querying and retrieving available assets, enabling asset discovery and negotiation in the dataspace.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ncatalog_controller = ControllerFactory.get_catalog_controller(\n    dataspace_version=dataspace_version,\n    adapter=consumer_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#catalog-controller-methods","title":"Catalog Controller Methods","text":"Method Description Parameters get_catalog Retrieves the catalog of available assets from a counterparty's endpoint. CatalogModel"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-agreement-controller","title":"Contract Agreement Controller","text":"<p>The Contract Agreement Controller is a component used to manage contract agreements in the Eclipse Dataspace Connector (EDC). Contract agreements are established after successful contract negotiations and define the terms and conditions under which data can be exchanged between parties.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ncontract_agreement_controller = ControllerFactory.get_contract_agreement_controller(\n    dataspace_version=dataspace_version,\n    adapter=consumer_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-agreement-controller-methods","title":"Contract Agreement Controller Methods","text":"Method Description Parameters get_negotiation_by_id Retrieves the details of a specific contract negotiation by its unique identifier (OID). oid get_by_id Retrieves the details of a specific contract agreement by its unique identifier (OID). oid get_all Retrieves a list of all contract agreements or negotiations. query Queries the EDC for a contract agreement based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-definition-controller","title":"Contract Definition Controller","text":"<p>The Contract Definition Controller is a component used to manage contract definitions in the Eclipse Dataspace Connector (EDC). Contract definitions specify the terms, policies, and conditions under which data can be accessed and exchanged.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ncontract_definition_controller =  ControllerFactory.get_contract_definition_controller(\n    dataspace_version=dataspace_version,\n    adapter=adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-definition-controller-methods","title":"Contract Definition Controller Methods","text":"Method Description Parameters create Registers a new contract definition in the EDC. ContractDefinitionModel update Updates the metadata or policies of an existing contract definition. ContractDefinitionModel get_by_id Retrieves the details of a specific contract definition by its unique identifier (OID). oid delete Deletes an contract definition from the EDC by its unique identifier (OID). oid get_all Retrieves a list of all contract definition currently registered in the EDC query Queries the EDC for an contract definition based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-negotiation-controller","title":"Contract Negotiation Controller","text":"<p>The Contract Negotiation Controller is a component used to manage contract negotiations in the Eclipse Dataspace Connector (EDC). Contract negotiations are a critical step in establishing agreements between parties for data exchange. This controller facilitates the process of initiating, tracking, and managing contract negotiations.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ncontract_negotiation_controller = ControllerFactory.get_contract_negotiation_controller(\n    dataspace_version=dataspace_version,\n    adapter=consumer_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#contract-negotiation-controller-methods","title":"Contract Negotiation Controller Methods","text":"Method Description Parameters create Initiates a new contract negotiation with a counterparty. ContractNegotiationModel terminate_by_id Terminates an ongoing contract negotiation by its unique identifier (OID). ContractNegotiationModel get_agreement_by_negotiation_id Retrieves the contract agreement associated with a specific negotiation ID. oid get_by_id Retrieves the details of a specific contract negotiation by its unique identifier (OID). oid get_all Retrieves a list of all contract negotiations currently registered in the EDC. get_state_by_id Retrieves the current state of a specific contract negotiation by its unique identifier (OID). oid query Queries the EDC for a contract negotiation based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#edr-controller","title":"EDR Controller","text":"<p>The EDR Controller (Endpoint Data Reference Controller) is a component used to manage Endpoint Data References (EDRs) in the Eclipse Dataspace Connector (EDC). EDRs are critical for enabling secure and efficient data transfers between parties in the dataspace. They provide the necessary information, such as endpoints and credentials, to access the data being shared.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\nedr_controller = ControllerFactory.get_edr_controller(\n    dataspace_version=dataspace_version,\n    adapter=consumer_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#edr-controller-methods","title":"EDR Controller Methods","text":"Method Description Parameters get_data_address Retrieves the data address associated with a specific asset or contract. oid refresh Refreshes the Endpoint Data Reference (EDR) for a specific asset or contract. oid create Creates a new Endpoint Data Reference (EDR) for a specific contract. ContractNegotiationModel get_all Retrieves a list of all Endpoint Data References (EDRs) currently registered in the EDC. delete Deletes an Endpoint Data Reference (EDR) by its unique identifier. oid query Queries the EDC for Endpoint Data References (EDRs) based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#policy-controller","title":"Policy Controller","text":"<p>The Policy Controller is a component used to manage policies in the Eclipse Dataspace Connector (EDC). Policies define the rules, constraints, and permissions for accessing and using data in the dataspace.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\npolicy_controller = ControllerFactory.get_policy_controller(\n    dataspace_version=dataspace_version,\n    adapter=adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#policy-controller-methods","title":"Policy Controller Methods","text":"Method Description Parameters create Registers a new policy in the EDC. PolicyModel update Updates the metadata or rules of an existing policy in the EDC. PolicyModel get_by_id Retrieves the details of a specific policy by its unique identifier (OID). oid delete Deletes a policy from the EDC by its unique identifier (OID). oid get_all Retrieves a list of all policies currently registered in the EDC. query Queries the EDC for policies based on specific criteria."},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#transfer-process-controller","title":"Transfer Process Controller","text":"<p>The Transfer Process Controller is a component used to manage data transfer processes in the Eclipse Dataspace Connector (EDC). It facilitates the initiation, monitoring, and management of data transfers between parties in the dataspace. This controller ensures that data transfers comply with the terms of the associated contract agreements.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ntransfer_process_controller = ControllerFactory.get_transfer_process_controller(\n    dataspace_version=dataspace_version,\n    adapter=consumer_adapter\n)\n</code></pre>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#transfer-process-controller-methods","title":"Transfer Process Controller Methods","text":"Method Description Parameters create Initiates a new data transfer process. TransferProcessModel terminate_by_id Terminates an ongoing data transfer process by its unique identifier (OID). TransferProcessModel deprovision_by_id Deprovisions resources associated with a specific transfer process. oid get_by_id Retrieves the details of a specific transfer process by its unique identifier (OID). oid get_all Retrieves a list of all transfer processes currently registered in the EDC. query Queries the EDC for transfer processes based on specific criteria. get_state_by_id Retrieves the current state of a specific transfer process by its unique identifier (OID). oid"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#dma-controller","title":"DMA Controller","text":"<p>The DMA Controller (Data Management API Controller) is a component used to interact with the Data Management API (DMA) of the Eclipse Dataspace Connector (EDC). It provides access to various controllers for managing assets, policies, contracts, and other resources in the dataspace.</p> Python<pre><code>from tractusx_sdk.dataspace.controllers.connector.controller_factory import ControllerFactory\n\ncontrollers = ControllerFactory.get_dma_controllers_for_version(\n    dataspace_version=version,\n    adapter=dma_adapter\n)\n</code></pre> <p>This method retrieves a set of controllers compatible with the specified <code>dataspace_version</code>.</p>"},{"location":"user-guide/dataspace-library/legacy/edc-sdk-usage/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/dataspace-library/tools/tools/","title":"Tools","text":""},{"location":"user-guide/dataspace-library/tools/tools/#tools","title":"Tools","text":"<p>This page provides a comprehensive overview of the utility tools available in the Tractus-X SDK. These tools provide essential functionality for common operations such as HTTP communication, data processing, encoding/decoding, file operations, and dataspace protocol handling. The tools are designed to be lightweight, reusable, and easy to integrate into your applications, serving as building blocks for more complex SDK functionality.</p>"},{"location":"user-guide/dataspace-library/tools/tools/#purpose","title":"Purpose","text":"<p>The Tractus-X SDK tools serve as foundational utilities that power the higher-level services and controllers. They provide:</p> <ul> <li>HTTP Communication: Simplified HTTP request handling with session management</li> <li>Data Processing: JSON manipulation, file operations, and general-purpose utilities</li> <li>Encoding/Decoding: URL-safe Base64 encoding for secure data transmission</li> <li>Dataspace Protocol Support: DSP (Dataspace Protocol) specific operations for catalog and policy handling</li> <li>Configuration Management: Application configuration and logging setup utilities</li> <li>Submodel Validation: Schema-based validation for Tractus-X submodels</li> </ul> <p>These tools abstract common operations and provide consistent interfaces across the SDK, reducing code duplication and ensuring reliable functionality.</p>"},{"location":"user-guide/dataspace-library/tools/tools/#available-tools","title":"Available Tools","text":""},{"location":"user-guide/dataspace-library/tools/tools/#httptools","title":"HttpTools","text":"<p>A comprehensive HTTP client wrapper that simplifies HTTP operations with built-in session management and FastAPI response handling.</p> <p>Key Features</p> <ul> <li>HTTP Methods: GET, POST, PUT, DELETE</li> <li>Session Management: Session-based and standalone requests</li> <li>Response Handling: FastAPI-compatible responses, JSON helpers</li> <li>URL Utilities: Safe URL manipulation and joining</li> <li>Error Handling: Standardized error/status codes</li> </ul> <p>Common Methods:</p> Method Description Parameters <code>do_get()</code> Perform GET request without session <code>url</code>, <code>verify</code>, <code>headers</code>, <code>timeout</code>, <code>params</code>, <code>allow_redirects</code> <code>do_post()</code> Perform POST request without session <code>url</code>, <code>data</code>, <code>verify</code>, <code>headers</code>, <code>timeout</code>, <code>json</code>, <code>allow_redirects</code> <code>do_put()</code> Perform PUT request without session <code>url</code>, <code>data</code>, <code>verify</code>, <code>headers</code>, <code>timeout</code>, <code>json</code>, <code>allow_redirects</code> <code>do_delete()</code> Perform DELETE request without session <code>url</code>, <code>verify</code>, <code>headers</code>, <code>timeout</code>, <code>params</code>, <code>allow_redirects</code> <code>json_response()</code> Create FastAPI JSON response <code>data</code>, <code>status_code</code>, <code>headers</code> <code>concat_into_url()</code> Join URL parts safely <code>*args</code> <code>proxy()</code> Proxy requests.Response to FastAPI Response <code>response</code> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools import HttpTools\n\n# Simple GET request\nresponse = HttpTools.do_get(\n    url=\"https://api.example.com/data\",\n    headers={\"Authorization\": \"Bearer token\"},\n    timeout=30\n)\n\n# POST with JSON data\nresponse = HttpTools.do_post(\n    url=\"https://api.example.com/submit\",\n    json={\"key\": \"value\"},\n    headers={\"Content-Type\": \"application/json\"}\n)\n\n# Create FastAPI JSON response\nfrom fastapi import FastAPI\napp = FastAPI()\n\n@app.get(\"/endpoint\")\ndef my_endpoint():\n    data = {\"message\": \"success\", \"data\": [1, 2, 3]}\n    return HttpTools.json_response(data, status_code=200)\n\n# URL manipulation\nfull_url = HttpTools.concat_into_url(\n    \"https://api.example.com\", \n    \"v1\", \n    \"resources\", \n    \"123\"\n)\n# Result: \"https://api.example.com/v1/resources/123\"\n</code></pre>"},{"location":"user-guide/dataspace-library/tools/tools/#dsptools","title":"DspTools","text":"<p>Specialized tools for handling Dataspace Protocol (DSP) operations, particularly for DCAT catalog processing and policy validation.</p> <p>Key Features</p> <ul> <li>Catalog Processing: Parse/filter DCAT catalogs by policy</li> <li>Policy Validation: Validate policies against allowed lists</li> <li>Asset Selection: Select valid assets by constraints</li> <li>Empty Catalog Detection: Check for valid datasets</li> </ul> <p>Core Methods:</p> Method Description Parameters Return Type <code>filter_assets_and_policies()</code> Filter assets and policies from catalog <code>catalog</code>, <code>allowed_policies</code> <code>list[tuple[str, dict]]</code> <code>get_dataset_policy()</code> Get valid policy from dataset <code>dataset</code>, <code>allowed_policies</code> <code>dict \\| None</code> <code>is_policy_valid()</code> Check if policy is in allowed list <code>policy</code>, <code>allowed_policies</code> <code>bool</code> <code>is_catalog_empty()</code> Check if catalog is empty <code>catalog</code> <code>bool</code> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools import DspTools\n\n# Define allowed policies\nallowed_policies = [\n    {\n        \"odrl:permission\": [{\n            \"odrl:action\": \"odrl:use\",\n            \"odrl:constraint\": {\n                \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                \"odrl:operator\": \"odrl:eq\",\n                \"odrl:rightOperand\": \"BPNL000000000001\"\n            }\n        }]\n    }\n]\n\n# Process catalog and filter assets\ncatalog = {\n    \"dcat:dataset\": [\n        {\n            \"@id\": \"asset-1\",\n            \"odrl:hasPolicy\": {\n                \"@id\": \"policy-1\",\n                \"@type\": \"odrl:Policy\",\n                \"odrl:permission\": [{\n                    \"odrl:action\": \"odrl:use\",\n                    \"odrl:constraint\": {\n                        \"odrl:leftOperand\": \"BusinessPartnerNumber\",\n                        \"odrl:operator\": \"odrl:eq\", \n                        \"odrl:rightOperand\": \"BPNL000000000001\"\n                    }\n                }]\n            }\n        }\n    ]\n}\n\n# Filter valid assets and policies\nvalid_assets = DspTools.filter_assets_and_policies(\n    catalog=catalog,\n    allowed_policies=allowed_policies\n)\n\nfor asset_id, policy in valid_assets:\n    print(f\"Valid asset: {asset_id} with policy: {policy['@id']}\")\n</code></pre>"},{"location":"user-guide/dataspace-library/tools/tools/#encoding-tools","title":"Encoding Tools","text":"<p>URL-safe Base64 encoding and decoding utilities for secure data transmission in dataspace protocols.</p> <p>Functions:</p> Function Description Parameters Return Type <code>encode_as_base64_url_safe()</code> Encode string as URL-safe Base64 <code>string: str</code> <code>str</code> <code>decode_base64_url_safe()</code> Decode URL-safe Base64 string <code>encoded_string: str</code> <code>str</code> <p>Key Features</p> <ul> <li>URL-Safe Encoding: Uses URL-safe Base64 alphabet</li> <li>Automatic Padding: Handles padding on decode</li> <li>UTF-8 Support: Full Unicode compatibility</li> </ul> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools import encode_as_base64_url_safe, decode_base64_url_safe\n\n# Encode sensitive data for URL transmission\nsensitive_data = \"user:password@domain.com\"\nencoded = encode_as_base64_url_safe(sensitive_data)\nprint(f\"Encoded: {encoded}\")\n\n# Decode received data\ndecoded = decode_base64_url_safe(encoded)\nprint(f\"Decoded: {decoded}\")\n\n# Use in URL parameters\nurl = f\"https://api.example.com/auth?token={encoded}\"\n</code></pre>"},{"location":"user-guide/dataspace-library/tools/tools/#operators-op","title":"Operators (op)","text":"<p>General-purpose utility class providing file operations, JSON handling, and system utilities.</p> <p>Key Categories:</p>"},{"location":"user-guide/dataspace-library/tools/tools/#json-operations","title":"JSON Operations","text":"Method Description Parameters <code>json_string_to_object()</code> Parse JSON string to Python object <code>json_string</code> <code>to_json()</code> Convert object to JSON string <code>source_object</code>, <code>indent</code>, <code>ensure_ascii</code> <code>to_json_file()</code> Write object to JSON file <code>source_object</code>, <code>json_file_path</code>, <code>file_open_mode</code>, <code>indent</code> <code>read_json_file()</code> Read JSON file to Python object <code>file_path</code>, <code>encoding</code>"},{"location":"user-guide/dataspace-library/tools/tools/#file-operations","title":"File Operations","text":"Method Description Parameters <code>path_exists()</code> Check if path exists <code>file_path</code> <code>make_dir()</code> Create directory with permissions <code>dir_name</code>, <code>permits</code> <code>delete_dir()</code> Delete directory and contents <code>dir_name</code> <code>copy_file()</code> Copy file to destination <code>file_path</code>, <code>dst</code> <code>move_file()</code> Move file to destination <code>file_path</code>, <code>dst</code> <code>to_string()</code> Read file contents as string <code>file_path</code>, <code>open_mode</code>, <code>encoding</code> <code>load_file()</code> Load file as BytesIO object <code>file_path</code> <code>delete_file()</code> Delete file <code>file_path</code>"},{"location":"user-guide/dataspace-library/tools/tools/#timestamp-operations","title":"Timestamp Operations","text":"Method Description Parameters <code>timestamp()</code> Get current timestamp <code>zone</code>, <code>string</code> <code>get_filedatetime()</code> Get formatted datetime for filenames <code>zone</code> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools import op\n\n# JSON operations\ndata = {\"name\": \"Tractus-X\", \"version\": \"1.0\", \"components\": [\"SDK\", \"Services\"]}\n\n# Write to JSON file\nop.to_json_file(\n    source_object=data,\n    json_file_path=\"config.json\",\n    indent=2\n)\n\n# Read from JSON file\nloaded_data = op.read_json_file(\"config.json\")\nprint(f\"Loaded: {loaded_data}\")\n\n# File operations\nif op.path_exists(\"data\"):\n    files = op.to_string(\"data/info.txt\")\n    print(f\"File contents: {files}\")\nelse:\n    op.make_dir(\"data\")\n    op.write_to_file(\"Sample data\", \"data/info.txt\")\n\n# Timestamps for logging\ncurrent_time = op.timestamp(string=True)\nlog_filename = f\"app_{op.get_filedatetime()}.log\"\n</code></pre>"},{"location":"user-guide/dataspace-library/tools/tools/#utils","title":"Utils","text":"<p>Configuration and argument parsing utilities for application setup.</p> <p>Key Features</p> <ul> <li>Argument Parsing: Command-line argument support</li> <li>Logging Setup: Load and configure logging</li> <li>App Configuration: Load application config files</li> <li>Supported Arguments: <code>--test-mode</code>, <code>--debug</code>, <code>--port</code>, <code>--host</code></li> </ul> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools import get_arguments, get_app_config, get_log_config\n\n# Parse command line arguments\nargs = get_arguments()\nif args.debug:\n    print(\"Debug mode enabled\")\n\n# Load application configuration\napp_config = get_app_config(\"config/app.yaml\")\ndatabase_url = app_config[\"database\"][\"url\"]\n\n# Setup logging\nlog_config = get_log_config(\"config/logging.yaml\", \"my-service\")\nimport logging\nlogger = logging.getLogger(\"my-service\")\nlogger.info(\"Application started\")\n</code></pre>"},{"location":"user-guide/dataspace-library/tools/tools/#submodel-validation-tools","title":"Submodel Validation Tools","text":"<p>Tools for validating Tractus-X submodels against their semantic schemas.</p> <p>Functions:</p> Function Description Parameters Return Type <code>submodel_schema_finder()</code> Find schema for semantic ID <code>semantic_id</code>, <code>link_core</code> <code>dict</code> <code>json_validator()</code> Validate JSON against schema <code>schema</code>, <code>json_to_validate</code>, <code>validation_type</code> <code>dict</code> <p>Example:</p> Python<pre><code>from tractusx_sdk.dataspace.tools.validate_submodels import submodel_schema_finder, json_validator\n\n# Validate a Tractus-X submodel\nsemantic_id = \"urn:samm:io.catenax.part_type_information:1.0.0#PartTypeInformation\"\n\n# Get the schema for validation\nschema_result = submodel_schema_finder(semantic_id)\nschema = schema_result[\"schema\"]\n\n# Sample submodel data\nsubmodel_data = {\n    \"partTypeInformation\": {\n        \"manufacturerPartId\": \"ABC123\",\n        \"partVersion\": \"1.0\",\n        \"partName\": \"Engine Component\"\n    }\n}\n\n# Validate the submodel\ntry:\n    validation_result = json_validator(\n        schema=schema,\n        json_to_validate=submodel_data,\n        validation_type=\"jsonschema\"\n    )\n    print(\"Validation successful:\", validation_result[\"message\"])\nexcept Exception as e:\n    print(\"Validation failed:\", str(e))\n</code></pre> <p>Best Practices</p> <ul> <li>Use session management for repeated HTTP requests.</li> <li>Always set timeouts and check response codes.</li> <li>Prefer <code>verify=True</code> for SSL in production.</li> <li>Check file/directory existence before operations.</li> <li>Specify encoding for text files.</li> </ul>"},{"location":"user-guide/dataspace-library/tools/tools/#troubleshooting","title":"Troubleshooting","text":"ConnectionError when using HttpTools <p>Why does this happen?</p> <p>This usually means there is a problem with network connectivity, SSL certificates, or timeout settings.</p> <p>How to debug: Python<pre><code>response = HttpTools.do_get(\n    url=\"https://api.example.com/test\",\n    timeout=10,\n    verify=False,  # Temporarily disable SSL verification for testing\n    headers={\"User-Agent\": \"Debug Client\"}\n)\nprint(f\"Status: {response.status_code}\")\nprint(f\"Headers: {response.headers}\")\n</code></pre></p> FileNotFoundError with file operations <p>Why does this happen?</p> <p>This happens when the file or directory does not exist. Always check for existence and handle missing files gracefully.</p> <p>Safe file reading: Python<pre><code>def safe_read_config(file_path: str) -&gt; dict:\n    if not op.path_exists(file_path):\n        logger.warning(f\"Config file not found: {file_path}, using defaults\")\n        return {\"default_config\": True}\n    try:\n        return op.read_json_file(file_path)\n    except Exception as e:\n        logger.error(f\"Failed to read config: {e}\")\n        return {\"error\": True}\n</code></pre></p> HTTPError in submodel validation <p>Why does this happen?</p> <p>This can occur if the semantic ID format is invalid or there is a network issue accessing the schema repository.</p> <p>Robust submodel validation: Python<pre><code>def validate_submodel_safely(semantic_id: str, data: dict) -&gt; bool:\n    try:\n        # Validate semantic ID format\n        if not semantic_id.startswith(\"urn:samm:\"):\n            raise ValueError(\"Invalid semantic ID format\")\n        schema_result = submodel_schema_finder(semantic_id)\n        validation_result = json_validator(schema_result[\"schema\"], data)\n        return True\n    except HTTPError as e:\n        logger.error(f\"Schema retrieval failed: {e}\")\n        return False\n    except Exception as e:\n        logger.error(f\"Validation failed: {e}\")\n        return False\n</code></pre></p>"},{"location":"user-guide/dataspace-library/tools/tools/#further-reading","title":"Further Reading","text":"<ul> <li>Dataspace Library Overview</li> </ul>"},{"location":"user-guide/dataspace-library/tools/tools/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/extension-library/","title":"Overview","text":""},{"location":"user-guide/extension-library/#extension-library","title":"Extension Library","text":"<p>TBD</p>"},{"location":"user-guide/extension-library/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/extension-library/semantics/semantics/","title":"Semantics","text":""},{"location":"user-guide/extension-library/semantics/semantics/#semantics","title":"Semantics","text":"<p>TBD</p>"},{"location":"user-guide/extension-library/semantics/semantics/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/","title":"Overview","text":""},{"location":"user-guide/industry-library/#industry-library","title":"Industry Library","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/discovery-services/bpn-discovery/","title":"BPN Discovery","text":""},{"location":"user-guide/industry-library/discovery-services/bpn-discovery/#bpn-discovery","title":"BPN Discovery","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/discovery-services/bpn-discovery/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/dtr/models/","title":"Models","text":""},{"location":"user-guide/industry-library/dtr/models/#dtr-models","title":"DTR Models","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/dtr/models/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/dtr/services/","title":"Services","text":""},{"location":"user-guide/industry-library/dtr/services/#dtr-services","title":"DTR Services","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/dtr/services/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/","title":"DTR","text":""},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#industry-dtr-usage","title":"Industry DTR Usage","text":"<ul> <li>Models<ul> <li>Endpoint</li> <li>ProtocolInformation</li> <li>ProtocolInformationSecurityAttributes</li> <li>ProtocolInformationSecurityAttributesTypes</li> <li>ShellDescriptor</li> <li>SubModelDescriptor</li> <li>SpecificAssetId</li> <li>Reference</li> <li>ReferenceTypes</li> <li>ReferenceKey</li> <li>ReferenceKeyTypes</li> <li>Result</li> </ul> </li> <li>Services<ul> <li>AasService<ul> <li>get_all_asset_administration_shell_descriptors</li> <li>get_asset_administration_shell_descriptor_by_id</li> <li>update_asset_administration_shell_descriptor</li> <li>delete_asset_administration_shell_descriptor</li> <li>get_submodel_descriptors_by_aas_id</li> <li>get_submodel_descriptor_by_ass_and_submodel_id</li> <li>create_asset_administration_shell_descriptor</li> <li>create_submodel_descriptor</li> <li>update_submodel_descriptor</li> <li>delete_submodel_descriptor</li> <li>get_description</li> <li>get_assets_ids_by_asset_administration_shell_id</li> <li>create_all_asset_ids_links_by_asset_administration_shell_id</li> <li>delete_all_asset_ids_links_by_asset_administration_shell_id</li> </ul> </li> </ul> </li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#models","title":"Models","text":""},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#endpoint","title":"Endpoint","text":"<p>The Endpoint model represents the access point for interacting with a specific resource or service in the Digital Twin Registry (DTR). It defines how external systems can communicate with a digital twin or its associated submodels.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import Endpoint\n\nendpoint = Endpoint(\n    interface=\"SUBMODEL-3.0\",\n    protocolInformation=ProtocolInformation\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters","title":"Explanation of Parameters","text":"<ul> <li><code>interface</code>: Specifies the interface type used by the endpoint. For example, \"SUBMODEL-3.0\" indicates that the endpoint adheres to the Submodel 3.0 interface specification.</li> <li><code>protocolInformation</code>: An instance of the ProtocolInformation model that provides details about the communication protocol, such as security attributes, endpoint type, and other protocol-specific configurations.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#protocolinformation","title":"ProtocolInformation","text":"<p>The ProtocolInformation model represents the details of the communication protocol used by an endpoint in the Digital Twin Registry (DTR). It provides the necessary metadata to define how external systems can interact with a digital twin or its submodels, including protocol type, version, security attributes, and additional protocol-specific configurations.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ProtocolInformation\n\nprotocolInformation=ProtocolInformation(\n    href=href_url,\n    endpointProtocol=\"HTTP\",\n    endpointProtocolVersion=[\"1.1\"],\n    subprotocol=\"DSP\",\n    subprotocolBody=subprotocol_body_str,\n    subprotocolBodyEncoding=\"plain\",\n    securityAttributes=[\n        ProtocolInformationSecurityAttributes\n    ], \n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_1","title":"Explanation of Parameters","text":"<ul> <li><code>href</code>: The URL or address of the endpoint. This is the primary access point for interacting with the resource.</li> <li><code>endpointProtocol</code>: Specifies the communication protocol used by the endpoint.</li> <li><code>endpointProtocolVersion</code>: A list of protocol versions supported by the endpoint.</li> <li><code>subprotocol</code>: Defines a subprotocol used in conjunction with the main protocol.</li> <li><code>subprotocolBody</code>: A string containing additional information or metadata specific to the subprotocol.</li> <li><code>subprotocolBodyEncoding</code>: Specifies the encoding format of the subprotocolBody.</li> <li><code>securityAttributes</code>: A list of security attributes (ProtocolInformationSecurityAttributes) that define the security requirements or configurations for the endpoint.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#protocolinformationsecurityattributes","title":"ProtocolInformationSecurityAttributes","text":"<p>The ProtocolInformationSecurityAttributes model represents the security attributes associated with an endpoint in the Digital Twin Registry (DTR). These attributes define the security requirements or configurations needed to interact with the endpoint, ensuring secure communication and data exchange.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ProtocolInformationSecurityAttributes\n\nProtocolInformationSecurityAttributes(\n    type=ProtocolInformationSecurityAttributesTypes,\n    key=\"NONE\",\n    value=\"NONE\",\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_2","title":"Explanation of Parameters","text":"<ul> <li><code>type</code>: Specifies the type of security attribute. This is an enumeration from ProtocolInformationSecurityAttributesTypes, which defines the available security attribute types.</li> <li><code>key</code>: Represents the key or identifier for the security attribute.</li> <li><code>value</code>: Represents the value associated with the security attribute.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#protocolinformationsecurityattributestypes","title":"ProtocolInformationSecurityAttributesTypes","text":"<p>The ProtocolInformationSecurityAttributesTypes is an enumeration (Enum) that defines the possible types of security attributes for endpoints in the Digital Twin Registry (DTR). These attributes specify the security mechanisms required to interact with an endpoint, ensuring secure communication and data exchange.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ProtocolInformationSecurityAttributesTypes\n\ntype=ProtocolInformationSecurityAttributesTypes.NONE\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#possible-values","title":"Possible Values","text":"<ol> <li><code>NONE</code>: Indicates that no specific security attributes are required for the endpoint.</li> <li><code>RFC_TLSA</code>: Refers to the use of TLSA (Transport Layer Security Authentication) as defined in RFC 6698.</li> <li><code>W3C_DID</code>: Refers to the use of Decentralized Identifiers (DIDs) as specified by the W3C DID specification.</li> </ol>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#shelldescriptor","title":"ShellDescriptor","text":"<p>The ShellDescriptor model represents the metadata and structure of an Asset Administration Shell (AAS) in the Digital Twin Registry (DTR). It provides information about the digital twin, including its unique identifiers and associated specific asset identifiers.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ShellDescriptor\n\nshell = ShellDescriptor(\n    id=aas_id.urn,\n    globalAssetId=global_id.urn,\n    specificAssetIds=specific_asset_ids,\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_3","title":"Explanation of Parameters","text":"<ul> <li><code>id</code>: The unique identifier of the Asset Administration Shell (AAS).</li> <li><code>globalAssetId</code>: The global identifier of the asset associated with the shell.</li> <li><code>specificAssetIds</code>: A list of specific asset identifiers (SpecificAssetId objects) that provide additional identification details for the asset. These identifiers can include key-value pairs that uniquely describe the asset.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#submodeldescriptor","title":"SubModelDescriptor","text":"<p>The SubModelDescriptor model represents the metadata and access information for a specific submodel of a digital twin in the Digital Twin Registry (DTR). Submodels define specific aspects or views of a digital twin, and the SubModelDescriptor provides the necessary details to describe and access these submodels.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import SubModelDescriptor\n\nsubmodel = SubModelDescriptor(\n    id=submodel_id.urn,\n    idShort=aspect_id_name,\n    semanticId=semantic_id_reference,\n    endpoints=[endpoint],\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_4","title":"Explanation of Parameters","text":"<ul> <li><code>id</code>: The unique identifier of the submodel.</li> <li><code>idShort</code>: A human-readable short identifier for the submodel.</li> <li><code>semanticId</code>: A reference to the semantic definition of the submodel. This links the submodel to its semantic meaning or standard, ensuring interoperability and understanding across systems.</li> <li><code>endpoints</code>: A list of Endpoint objects that define how the submodel can be accessed. Each endpoint specifies the protocol, address, and other details required to interact with the submodel.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#specificassetid","title":"SpecificAssetId","text":"<p>The SpecificAssetId model represents a unique identifier for a specific asset in the Digital Twin Registry (DTR). It is used to link a digital twin to a physical or logical asset by providing additional identification details.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import SpecificAssetId\n\nspecific_customer_part_asset_id = SpecificAssetId(\n    name=\"customerPartId\",\n    value=customer_part_id,\n    externalSubjectId=Reference\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_5","title":"Explanation of Parameters","text":"<ul> <li><code>name</code>: The key or name of the specific asset identifier. This describes the type of identifier being provided.</li> <li><code>value</code>: The value of the specific asset identifier.</li> <li><code>externalSubjectId</code>: A reference to an external subject associated with the asset.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#reference","title":"Reference","text":"<p>The Reference model represents a link to an external resource or entity in the Digital Twin Registry (DTR). It is used to associate elements, such as assets or submodels, with external definitions, systems, or identifiers. This ensures interoperability and traceability across different systems.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import Reference\n\nexternalSubjectId=Reference(\n    type=ReferenceTypes,\n    keys=[\n        ReferenceKey,\n    ],\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_6","title":"Explanation of Parameters","text":"<ul> <li><code>type</code>: Specifies the type of reference. This is an enumeration from ReferenceTypes, which defines the kind of reference being used.</li> <li><code>keys</code>: A list of ReferenceKey objects that define the components of the reference.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#referencetypes","title":"ReferenceTypes","text":"<p>The ReferenceTypes model is an enumeration (Enum) that defines the possible types of references used in the Digital Twin Registry (DTR). These reference types specify the context or purpose of a reference, enabling elements in the registry (such as assets or submodels) to be linked to external resources, systems, or definitions.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ReferenceTypes\n\nReferenceTypes.EXTERNAL_REFERENCE\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#possible-values_1","title":"Possible Values","text":"<ol> <li><code>MODEL_REFERENCE</code>: Indicates that the reference points to a specific model or definition within the context of the Asset Administration Shell (AAS).</li> <li><code>EXTERNAL_REFERENCE</code>: Indicates that the reference points to an external resource or entity outside the Digital Twin Registry.</li> </ol>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#referencekey","title":"ReferenceKey","text":"<p>The ReferenceKey model represents a single key in a reference within the Digital Twin Registry (DTR). It is used to define the components of a Reference, specifying the type and value of the key. Each ReferenceKey contributes to forming a complete reference to an external or internal resource.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ReferenceKey\n\nReferenceKey(\n    type=ReferenceKeyTypes, value=bpn\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_7","title":"Explanation of Parameters","text":"<ul> <li><code>type</code>: Specifies the type of the key.</li> <li><code>value</code>: The actual value of the key.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#referencekeytypes","title":"ReferenceKeyTypes","text":"<p>The ReferenceKeyTypes model is an enumeration (Enum) that defines the possible types of keys used in a ReferenceKey within the Digital Twin Registry (DTR). These key types specify the kind of resource or element being referenced, ensuring clarity and consistency when linking elements in the registry to internal or external resources.</p> Python<pre><code>from tractusx_sdk.industry.models.aas.v3 import ReferenceKeyTypes\n\ntype=ReferenceKeyTypes.GLOBAL_REFERENCE\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#possible-values_2","title":"Possible Values","text":"<ol> <li><code>ANNOTATED_RELATIONSHIP_ELEMENT</code>: Represents a relationship element with additional annotations.</li> <li><code>ASSET_ADMINISTRATION_SHELL</code>: Refers to an Asset Administration Shell (AAS) itself.</li> <li><code>BASIC_EVENT_ELEMENT</code>: Represents a basic event element in the AAS, used to describe events triggered by the system.</li> <li><code>BLOB</code>: Refers to a Binary Large Object (BLOB) in the AAS, typically used to store binary data such as images or files.</li> <li><code>CAPABILITY</code>: Represents a capability element in the AAS, describing the ability of an asset to perform a specific function.</li> <li><code>CONCEPT_DESCRIPTION</code>: Refers to a semantic definition or concept in the AAS.</li> <li><code>DATA_ELEMENT</code>: Represents a generic data element in the AAS, used to store data values.</li> <li><code>ENTITY</code>: Represents an entity in the AAS, such as a physical or logical object.</li> <li><code>EVENT_ELEMENT</code>: Refers to an event element in the AAS, used to describe events triggered by the system.</li> <li><code>FILE</code>: Refers to a file element in the AAS.</li> <li><code>FRAGMENT_REFERENCE</code>: Represents a reference to a fragment of a resource or document.</li> <li><code>GLOBAL_REFERENCE</code>: Represents a globally recognized reference to an external resource or entity.</li> <li><code>IDENTIFIABLE</code>: Refers to an identifiable element in the AAS, which has a unique identifier.</li> <li><code>MULTI_LANGUAGE_PROPERTY</code>: Represents a property in the AAS that supports multiple languages.</li> <li><code>OPERATION</code>: Refers to an operation element in the AAS, describing a function or method that can be executed.</li> <li><code>PROPERTY</code>: Represents a property in the AAS, typically a single value or attribute.</li> <li><code>RANGE</code>: Refers to a range element in the AAS, used to define a range of values.</li> <li><code>REFERABLE</code>: Represents an element in the AAS that can be referred to by a unique identifier.</li> <li><code>REFERENCE_ELEMENT</code>: Refers to a reference element in the AAS, used to link to other elements or resources.</li> <li><code>RELATIONSHIP_ELEMENT</code>: Represents a relationship element in the AAS, describing a relationship between two entities.</li> <li><code>SUBMODEL</code>: Refers to a submodel in the Asset Administration Shell (AAS).</li> <li><code>SUBMODEL_ELEMENT</code>: Refers to an element within a submodel.</li> <li><code>SUBMODEL_ELEMENT_COLLECTION</code>: Refers to a collection of submodel elements.</li> <li><code>SUBMODEL_ELEMENT_LIST</code>: Represents a list of submodel elements in the AAS, used to group related elements.</li> </ol>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#result","title":"Result","text":"<p>The Result model is used to represent the outcome of an operation or request in the Digital Twin Registry (DTR). Specifically, it is designed to handle cases where the response is not a successful 2XX HTTP status code. This model provides a structured way to capture and analyze error messages or other details about the failed operation.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#services","title":"Services","text":"<p>The AasService is a service class provided by the Tractus-X SDK to interact with the Digital Twin Registry (DTR). It provides a set of methods to manage Asset Administration Shells (AAS), submodels, and their associated metadata. This service simplifies communication with the DTR by abstracting API calls into high-level methods.</p> Python<pre><code>from tractusx_sdk.industry.services import AasService\n\naas_service = AasService(\n    base_url=dtr_url,\n    base_lookup_url=dtr_lookup_url,\n    api_path=api_path,\n)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#explanation-of-parameters_8","title":"Explanation of Parameters","text":"<ul> <li><code>base_url</code>: The base URL of the Digital Twin Registry.</li> <li><code>base_lookup_url</code>: The base URL for lookup operations in the registry.</li> <li><code>api_path</code>: The API path for accessing the DTR endpoints.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#aas-service-methods","title":"Aas Service Methods","text":""},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_all_asset_administration_shell_descriptors","title":"get_all_asset_administration_shell_descriptors","text":"<p>Retrieves all Asset Administration Shell (AAS) Descriptors from the Digital Twin Registry.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args","title":"Args","text":"<ul> <li><code>limit</code> (int, optional): Specifies the maximum number of shell descriptors to return in a single response.</li> <li><code>cursor</code> (str, optional): A server-generated identifier used for pagination to retrieve the next set of results.</li> <li><code>asset_kind</code> (AssetKind_3_0, optional): Filters the results by the kind of asset.</li> <li><code>asset_type</code> (str, optional): Filters the results by the type of asset. The value is automatically BASE64-URL-encoded.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization and filtering</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns","title":"Returns","text":"<ul> <li><code>GetAllShellDescriptorsResponse</code>: Contains the retrieved shell descriptors and pagination metadata.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_asset_administration_shell_descriptor_by_id","title":"get_asset_administration_shell_descriptor_by_id","text":"<p>Retrieves a specific Asset Administration Shell (AAS) Descriptor by its identifier.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_1","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization. If provided, it is added as an Edc-Bpn header to the request.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_1","title":"Returns","text":"<ul> <li><code>ShellDescriptor</code>: The requested Asset Administration Shell Descriptor object containing metadata about the AAS.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_1","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#update_asset_administration_shell_descriptor","title":"update_asset_administration_shell_descriptor","text":"<p>Updates an existing Asset Administration Shell (AAS) Descriptor.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_2","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>shell_descriptor</code> (ShellDescriptor): The updated ShellDescriptor object containing the new metadata for the AAS.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization. If provided, it is added as an Edc-Bpn header to the request.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_2","title":"Returns","text":"<ul> <li><code>None</code>: Returned if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_2","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#delete_asset_administration_shell_descriptor","title":"delete_asset_administration_shell_descriptor","text":"<p>Deletes an existing Asset Administration Shell (AAS) Descriptor.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_3","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization. If provided, it is added as an Edc-Bpn header to the request.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_3","title":"Returns","text":"<ul> <li><code>None</code>: Returned if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_3","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_submodel_descriptors_by_aas_id","title":"get_submodel_descriptors_by_aas_id","text":"<p>Retrieves all Submodel Descriptors associated with a specific Asset Administration Shell (AAS).</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_4","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>limit</code> (int, optional): Specifies the maximum number of shell descriptors to return in a single response.</li> <li><code>cursor</code> (str, optional): A server-generated identifier used for pagination to retrieve the next set of results.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization and filtering</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_4","title":"Returns","text":"<ul> <li><code>GetSubmodelDescriptorsByAssResponse</code>: A response object containing a list of SubModelDescriptor objects in the result field and a pagination metadata in the paging_metadata field.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_4","title":"Raises","text":"<ul> <li><code>ValueError</code>: Raised if the limit parameter is provided but is less than 1.</li> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_submodel_descriptor_by_ass_and_submodel_id","title":"get_submodel_descriptor_by_ass_and_submodel_id","text":"<p>Retrieves a specific Submodel Descriptor by its identifier and parent AAS identifier.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_5","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>submodel_identifier</code> (str): The unique identifier of the Submodel to retrieve.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_5","title":"Returns","text":"<ul> <li><code>SubModelDescriptor</code>: The requested Submodel Descriptor object containing metadata about the submodel.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_5","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#create_asset_administration_shell_descriptor","title":"create_asset_administration_shell_descriptor","text":"<p>Creates a new Asset Administration Shell (AAS) Descriptor in the Digital Twin Registry.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_6","title":"Args","text":"<ul> <li><code>shell_descriptor</code> (ShellDescriptor): The ShellDescriptor object containing the metadata for the new AAS to be created.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_6","title":"Returns","text":"<ul> <li><code>ShellDescriptor</code>: The created Asset Administration Shell Descriptor object, including server-assigned fields such as unique identifiers.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_6","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#create_submodel_descriptor","title":"create_submodel_descriptor","text":"<p>Creates a new Submodel Descriptor in the Digital Twin Registry.</p> <ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>submodel_identifier</code> (str): The unique identifier of the Submodel to retrieve.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_7","title":"Returns","text":"<ul> <li><code>SubModelDescriptor</code>: The created Submodel Descriptor object, including server-assigned fields such as unique identifiers.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_7","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#update_submodel_descriptor","title":"update_submodel_descriptor","text":"<p>Updates an existing Submodel Descriptor.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_7","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>submodel_identifier</code> (str): The unique identifier of the Submodel to retrieve.</li> <li><code>submodel_descriptor</code> (SubModelDescriptor): The updated SubModelDescriptor object containing the new metadata for the Submodel.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_8","title":"Returns","text":"<ul> <li><code>None</code>: Returned if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_8","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#delete_submodel_descriptor","title":"delete_submodel_descriptor","text":"<p>Deletes an existing Submodel Descriptor.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_8","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>submodel_identifier</code> (str): The unique identifier of the Submodel to retrieve.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_9","title":"Returns","text":"<ul> <li><code>None</code>: Returned if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_9","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_description","title":"get_description","text":"<p>Retrieves the service description, which presents the capabilities of the server, in particular which profiles they implement.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_10","title":"Returns","text":"<ul> <li><code>ServiceDescription</code>: A ServiceDescription object containing details about the server's capabilities if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_10","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#get_assets_ids_by_asset_administration_shell_id","title":"get_assets_ids_by_asset_administration_shell_id","text":"<p>Retrieves all asset IDs associated with a specific Asset Administration Shell (AAS).</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_9","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_11","title":"Returns","text":"<ul> <li><code>List[SpecificAssetId]</code>: A list of SpecificAssetId objects if the request is successful. Each SpecificAssetId contains details such as the key and value of the asset ID.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_11","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#create_all_asset_ids_links_by_asset_administration_shell_id","title":"create_all_asset_ids_links_by_asset_administration_shell_id","text":"<p>Creates links between an Asset Administration Shell (AAS) and a list of assets IDs.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_10","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>list_of_asset_ids</code> (List[SpecificAssetId]): A list of SpecificAssetId objects representing the asset IDs to link to the AAS.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_12","title":"Returns","text":"<ul> <li><code>List[SpecificAssetId]</code>: A list of SpecificAssetId objects if the request is successful. Each SpecificAssetId contains details such as the key and value of the asset ID.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_12","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#delete_all_asset_ids_links_by_asset_administration_shell_id","title":"delete_all_asset_ids_links_by_asset_administration_shell_id","text":"<p>Deletes all links between an Asset Administration Shell (AAS) and its associated asset IDs.</p>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#args_11","title":"Args","text":"<ul> <li><code>aas_identifier</code> (str): The unique identifier of the Asset Administration Shell.</li> <li><code>bpn</code> (str, optional): The Business Partner Number (BPN) used for authorization.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#returns_13","title":"Returns","text":"<ul> <li><code>None</code>: Returned if the request is successful.</li> <li><code>Result</code>: A result object is returned if the request fails with a non-2XX status code, providing details about the error.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#raises_13","title":"Raises","text":"<ul> <li><code>ConnectionError</code>: Raised if there is a network connectivity issue.</li> <li><code>TimeoutError</code>: Raised if the request times out.</li> <li><code>ValidationError</code>: Raised if the JSON response does not match the expected model.</li> </ul>"},{"location":"user-guide/industry-library/legacy/dtr-sdk-usage/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/","title":"Submodel Server","text":""},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/#industry-submodel-service-usage","title":"Industry Submodel Service Usage","text":""},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/#adapters","title":"Adapters","text":""},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/#filesystemadapter","title":"FileSystemAdapter","text":"<p>The FileSystemAdapter is a utility provided by the Tractus-X SDK to interact with the file system for managing submodels. It allows users to perform common file operations such as reading, writing, deleting files, and managing directories.</p> Python<pre><code>from tractusx_sdk.industry.adapters.submodel_adapter_factory import SubmodelAdapterFactory\n\nsubmodel_service_path = \"/data/submodels\"\nfile_system = SubmodelAdapterFactory.get_file_system(root_path=submodel_service_path)\n</code></pre>"},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/#filesystemadapter-methods","title":"FileSystemAdapter Methods","text":"Method Description Parameters read Return the entire content of a file path write Write a new file path delete Delete a specific file path exists Check if a file exists path list_contents Return a list of files based in a directory directory_path create_directory Create a directory path delete_directory Remove a directory path"},{"location":"user-guide/industry-library/legacy/submodel-server-sdk-usage/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/submodel-server/adapters/base-adapter/","title":"Base Adapter","text":""},{"location":"user-guide/industry-library/submodel-server/adapters/base-adapter/#submodel-server-base-adapter","title":"Submodel Server Base Adapter","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/submodel-server/adapters/base-adapter/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"},{"location":"user-guide/industry-library/submodel-server/adapters/file-system-adapter/","title":"File System Adapter","text":""},{"location":"user-guide/industry-library/submodel-server/adapters/file-system-adapter/#submodel-server-file-system-adapter","title":"Submodel Server File System Adapter","text":"<p>TBD</p>"},{"location":"user-guide/industry-library/submodel-server/adapters/file-system-adapter/#notice","title":"NOTICE","text":"<p>This work is licensed under the CC-BY-4.0.</p> <ul> <li>SPDX-License-Identifier: CC-BY-4.0</li> <li>SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation</li> <li>Source URL: https://github.com/eclipse-tractusx/tractusx-sdk</li> </ul>"}]}